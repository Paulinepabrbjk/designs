// title      : Polyhedrons : Catalan solids
// author     : Gilbert Duval
// license    : MIT License
// revision   : 0.001
// tags       : polyhedron
// file       : polyhedrons_catalan.jscad

// Data from dmccooey.com/polyhedra

// Library to include with : include("polyhedrons_catalan.jscad");
// Instanciate before use : polyh3();

polyh3 = function () {
polyh3.triakis_tetrahedron = function (){
// http://dmccooey.com/polyhedra/TriakisTetrahedron.html
var C0, C1, vertices, faces;
    
C0 = 9 * sqrt(2) / 20;
C1 = 3 * sqrt(2) / 4;

vertices = [
[ C1,  C1,  C1],
[ C1, -C1, -C1],
[-C1, -C1,  C1],
[-C1,  C1, -C1],
[ C0, -C0,  C0],
[ C0,  C0, -C0],
[-C0,  C0,  C0],
[-C0, -C0, -C0]
];

faces = [
[4, 0, 2],
[4, 2, 1],
[4, 1, 0],
[5, 0, 1],
[5, 1, 3],
[5, 3, 0],
[6, 0, 3],
[6, 3, 2],
[6, 2, 0],
[7, 1, 2],
[7, 2, 3],
[7, 3, 1]
];
return polyhedron({points:vertices, polygons:faces});
}

polyh3.rhombic_dodecahedron = function (){
// http://dmccooey.com/polyhedra/RhombicDodecahedron.html
var C0, C1, vertices, faces;
    
C0 = 3 * sqrt(2) / 8;
C1 = 3 * sqrt(2) / 4;

vertices = [  
[0.0, 0.0,  C1],
[0.0, 0.0, -C1],
[ C1, 0.0, 0.0],
[-C1, 0.0, 0.0],
[0.0,  C1, 0.0],
[0.0, -C1, 0.0],
[ C0,  C0,  C0],
[ C0,  C0, -C0],
[ C0, -C0,  C0],
[ C0, -C0, -C0],
[-C0,  C0,  C0],
[-C0,  C0, -C0],
[-C0, -C0,  C0],
[-C0, -C0, -C0]];

faces = [
[6,  0,  8,  2],
[6,  2,  7,  4],
[6,  4, 10,  0],
[9,  1,  7,  2],
[9,  2,  8,  5],
[9,  5, 13,  1],
[11,  1, 13,  3],
[11,  3, 10,  4],
[11,  4,  7,  1],
[12,  0, 10,  3],
[12,  3, 13,  5],
[12,  5,  8,  0]];
    
return polyhedron({points:vertices, polygons:faces});
}

polyh3.tetrakis_hexahedron = function (){
// http://dmccooey.com/polyhedra/TetrakisHexahedron.html
var C0, C1, vertices, faces;
    
C0 = 3 * sqrt(2) / 4;
C1 = 9 * sqrt(2) / 8;

vertices = [  
[0.0, 0.0,  C1],
[0.0, 0.0, -C1],
[ C1, 0.0, 0.0],
[-C1, 0.0, 0.0],
[0.0,  C1, 0.0],
[0.0, -C1, 0.0],
[ C0,  C0,  C0],
[ C0,  C0, -C0],
[ C0, -C0,  C0],
[ C0, -C0, -C0],
[-C0,  C0,  C0],
[-C0,  C0, -C0],
[-C0, -C0,  C0],
[-C0, -C0, -C0]];

faces = [
[0,  6, 10],
[0, 10, 12],
[0, 12,  8],
[0,  8,  6],
[1,  7,  9],
[1,  9, 13],
[1, 13, 11],
[1, 11,  7],
[2,  6,  8],
[2,  8,  9],
[2,  9,  7],
[2,  7,  6],
[3, 10, 11],
[3, 11, 13],
[3, 13, 12],
[3, 12, 10],
[4,  6,  7],
[4,  7, 11],
[4, 11, 10],
[4, 10,  6],
[5,  8, 12],
[5, 12, 13],
[5, 13,  9],
[5,  9,  8]
];
    
return polyhedron({points:vertices, polygons:faces});
}

polyh3.triakis_octahedron = function (){
// http://dmccooey.com/polyhedra/TriakisOctahedron.html
var C0, vertices, faces;

C0 = 1 + sqrt(2);

vertices = [
[ 0.0,  0.0,   C0],
[ 0.0,  0.0,  -C0],
[  C0,  0.0,  0.0],
[ -C0,  0.0,  0.0],
[ 0.0,   C0,  0.0],
[ 0.0,  -C0,  0.0],
[ 1.0,  1.0,  1.0],
[ 1.0,  1.0, -1.0],
[ 1.0, -1.0,  1.0],
[ 1.0, -1.0, -1.0],
[-1.0,  1.0,  1.0],
[-1.0,  1.0, -1.0],
[-1.0, -1.0,  1.0],
[-1.0, -1.0, -1.0]];

faces =[
[6,  0,  2],
[6,  2,  4],
[6,  4,  0],
[7,  1,  4],
[7,  4,  2],
[7,  2,  1],
[8,  0,  5],
[8,  5,  2],
[8,  2,  0],
[9,  1,  2],
[9,  2,  5],
[9,  5,  1],
[10,  0,  4],
[10,  4,  3],
[10,  3,  0],
[11,  1,  3],
[11,  3,  4],
[11,  4,  1],
[12,  0,  3],
[12,  3,  5],
[12,  5,  0],
[13,  1,  5],
[13,  5,  3],
[13,  3,  1]
];
    
return polyhedron({points:vertices, polygons:faces});
}

polyh3.deltoidal_icositetrahedron = function (){
// http://dmccooey.com/polyhedra/DeltoidalIcositetrahedron.html
var C0, C1, vertices, faces;
    
C0 = (4 + sqrt(2)) / 7;
C1 = sqrt(2);

vertices = [
[ 0.0,  0.0,   C1],
[ 0.0,  0.0,  -C1],
[  C1,  0.0,  0.0],
[ -C1,  0.0,  0.0],
[ 0.0,   C1,  0.0],
[ 0.0,  -C1,  0.0],
[ 1.0,  0.0,  1.0],
[ 1.0,  0.0, -1.0],
[-1.0,  0.0,  1.0],
[-1.0,  0.0, -1.0],
[ 1.0,  1.0,  0.0],
[ 1.0, -1.0,  0.0],
[-1.0,  1.0,  0.0],
[-1.0, -1.0,  0.0],
[ 0.0,  1.0,  1.0],
[ 0.0,  1.0, -1.0],
[ 0.0, -1.0,  1.0],
[ 0.0, -1.0, -1.0],
[  C0,   C0,   C0],
[  C0,   C0,  -C0],
[  C0,  -C0,   C0],
[  C0,  -C0,  -C0],
[ -C0,   C0,   C0],
[ -C0,   C0,  -C0],
[ -C0,  -C0,   C0],
[ -C0,  -C0,  -C0]];

faces= [
[0,  6, 18, 14],
[0, 14, 22,  8],
[0,  8, 24, 16],
[0, 16, 20,  6],
[1,  9, 23, 15],
[1, 15, 19,  7],
[1,  7, 21, 17],
[1, 17, 25,  9],
[2,  7, 19, 10],
[2, 10, 18,  6],
[2,  6, 20, 11],
[2, 11, 21,  7],
[3,  8, 22, 12],
[3, 12, 23,  9],
[3,  9, 25, 13],
[3, 13, 24,  8],
[4, 10, 19, 15],
[4, 15, 23, 12],
[4, 12, 22, 14],
[4, 14, 18, 10],
[5, 11, 20, 16],
[5, 16, 24, 13],
[5, 13, 25, 17],
[5, 17, 21, 11]];
    
return polyhedron({points:vertices, polygons:faces});
}

polyh3.pentagonal_icositetrahedron_dextro = function (){
// http://dmccooey.com/polyhedra/RpentagonalIcositetrahedron.html
var C0, C1, C2, C3, C4, vertices, faces;
    
C0 = sqrt(6 * (Math.cbrt(6*(9 + sqrt(33))) + Math.cbrt(6*(9 - sqrt(33))) - 6)) / 12;
C1 = sqrt(6 * (6 + Math.cbrt(6*(9 + sqrt(33))) + Math.cbrt(6*(9 - sqrt(33))))) / 12;
C2 = sqrt(6 * (18 + Math.cbrt(6*(9 + sqrt(33))) + Math.cbrt(6*(9 - sqrt(33))))) / 12;
C3 = sqrt(6 * (14+Math.cbrt(2*(1777+33*sqrt(33)))+Math.cbrt(2*(1777-33*sqrt(33))))) / 12;

vertices = [
[0.0, 0.0,  C3],
[0.0, 0.0, -C3],
[ C3, 0.0, 0.0],
[-C3, 0.0, 0.0],
[0.0,  C3, 0.0],
[0.0, -C3, 0.0],
[ C1, -C0,  C2],
[ C1,  C0, -C2],
[-C1,  C0,  C2],
[-C1, -C0, -C2],
[ C2, -C1,  C0],
[ C2,  C1, -C0],
[-C2,  C1,  C0],
[-C2, -C1, -C0],
[ C0, -C2,  C1],
[ C0,  C2, -C1],
[-C0,  C2,  C1],
[-C0, -C2, -C1],
[ C0,  C1,  C2],
[ C0, -C1, -C2],
[-C0, -C1,  C2],
[-C0,  C1, -C2],
[ C2,  C0,  C1],
[ C2, -C0, -C1],
[-C2, -C0,  C1],
[-C2,  C0, -C1],
[ C1,  C2,  C0],
[ C1, -C2, -C0],
[-C1, -C2,  C0],
[-C1,  C2, -C0],
[ C1,  C1,  C1],
[ C1,  C1, -C1],
[ C1, -C1,  C1],
[ C1, -C1, -C1],
[-C1,  C1,  C1],
[-C1,  C1, -C1],
[-C1, -C1,  C1],
[-C1, -C1, -C1]];

faces = [
[0,  6, 22, 30, 18],
[0, 18, 16, 34,  8],
[0,  8, 24, 36, 20],
[0, 20, 14, 32,  6],
[1,  7, 23, 33, 19],
[1, 19, 17, 37,  9],
[1,  9, 25, 35, 21],
[1, 21, 15, 31,  7],
[2, 10, 27, 33, 23],
[2, 23,  7, 31, 11],
[2, 11, 26, 30, 22],
[2, 22,  6, 32, 10],
[3, 12, 29, 35, 25],
[3, 25,  9, 37, 13],
[3, 13, 28, 36, 24],
[3, 24,  8, 34, 12],
[4, 15, 21, 35, 29],
[4, 29, 12, 34, 16],
[4, 16, 18, 30, 26],
[4, 26, 11, 31, 15],
[5, 14, 20, 36, 28],
[5, 28, 13, 37, 17],
[5, 17, 19, 33, 27],
[5, 27, 10, 32, 14]
];
    
return polyhedron({points:vertices, polygons:faces});
}

polyh3.pentagonal_icositetrahedron_laevo = function (){
// http://dmccooey.com/polyhedra/LpentagonalIcositetrahedron.html
var C0, C1, C2, C3, vertices, faces;

C0 = sqrt(6 * (Math.cbrt(6*(9 + sqrt(33))) + Math.cbrt(6*(9 - sqrt(33))) - 6)) / 12;
C1 = sqrt(6 * (6 + Math.cbrt(6*(9 + sqrt(33))) + Math.cbrt(6*(9 - sqrt(33))))) / 12;
C2 = sqrt(6 * (18 + Math.cbrt(6*(9 + sqrt(33))) + Math.cbrt(6*(9 - sqrt(33))))) / 12;
C3 = sqrt(6 * (14+Math.cbrt(2*(1777+33*sqrt(33)))+Math.cbrt(2*(1777-33*sqrt(33))))) / 12;

vertices = [
[0.0, 0.0, -C3],
[0.0, 0.0,  C3],
[-C3, 0.0, 0.0],
[ C3, 0.0, 0.0],
[0.0, -C3, 0.0],
[0.0,  C3, 0.0],
[-C1,  C0, -C2],
[-C1, -C0,  C2],
[ C1, -C0, -C2],
[ C1,  C0,  C2],
[-C2,  C1, -C0],
[-C2, -C1,  C0],
[ C2, -C1, -C0],
[ C2,  C1,  C0],
[-C0,  C2, -C1],
[-C0, -C2,  C1],
[ C0, -C2, -C1],
[ C0,  C2,  C1],
[-C0, -C1, -C2],
[-C0,  C1,  C2],
[ C0,  C1, -C2],
[ C0, -C1,  C2],
[-C2, -C0, -C1],
[-C2,  C0,  C1],
[ C2,  C0, -C1],
[ C2, -C0,  C1],
[-C1, -C2, -C0],
[-C1,  C2,  C0],
[ C1,  C2, -C0],
[ C1, -C2,  C0],
[-C1, -C1, -C1],
[-C1, -C1,  C1],
[-C1,  C1, -C1],
[-C1,  C1,  C1],
[ C1, -C1, -C1],
[ C1, -C1,  C1],
[ C1,  C1, -C1],
[ C1,  C1,  C1]];

faces = [
[0, 18, 30, 22,  6],
[0,  8, 34, 16, 18],
[0, 20, 36, 24,  8],
[0,  6, 32, 14, 20],
[1, 19, 33, 23,  7],
[1,  9, 37, 17, 19],
[1, 21, 35, 25,  9],
[1,  7, 31, 15, 21],
[2, 23, 33, 27, 10],
[2, 11, 31,  7, 23],
[2, 22, 30, 26, 11],
[2, 10, 32,  6, 22],
[3, 25, 35, 29, 12],
[3, 13, 37,  9, 25],
[3, 24, 36, 28, 13],
[3, 12, 34,  8, 24],
[4, 29, 35, 21, 15],
[4, 16, 34, 12, 29],
[4, 26, 30, 18, 16],
[4, 15, 31, 11, 26],
[5, 28, 36, 20, 14],
[5, 17, 37, 13, 28],
[5, 27, 33, 19, 17],
[5, 14, 32, 10, 27]
];
    
return polyhedron({points:vertices, polygons:faces});
}

polyh3.rhombic_triacontahedron = function (){
// http://dmccooey.com/polyhedra/RhombicTriacontahedron.html
var C0, C1, C2, vertices, faces;

C0 = sqrt(5) / 4;
C1 = (5 + sqrt(5)) / 8;
C2 = (5 + 3 * sqrt(5)) / 8;

vertices = [
[ C1, 0.0,  C2],
[ C1, 0.0, -C2],
[-C1, 0.0,  C2],
[-C1, 0.0, -C2],
[ C2,  C1, 0.0],
[ C2, -C1, 0.0],
[-C2,  C1, 0.0],
[-C2, -C1, 0.0],
[0.0,  C2,  C1],
[0.0,  C2, -C1],
[0.0, -C2,  C1],
[0.0, -C2, -C1],
[0.0,  C0,  C2],
[0.0,  C0, -C2],
[0.0, -C0,  C2],
[0.0, -C0, -C2],
[ C2, 0.0,  C0],
[ C2, 0.0, -C0],
[-C2, 0.0,  C0],
[-C2, 0.0, -C0],
[ C0,  C2, 0.0],
[ C0, -C2, 0.0],
[-C0,  C2, 0.0],
[-C0, -C2, 0.0],
[ C1,  C1,  C1],
[ C1,  C1, -C1],
[ C1, -C1,  C1],
[ C1, -C1, -C1],
[-C1,  C1,  C1],
[-C1,  C1, -C1],
[-C1, -C1,  C1],
[-C1, -C1, -C1]];

faces = [
[0, 12,  2, 14],
[0, 14, 10, 26],
[0, 26,  5, 16],
[1, 13,  9, 25],
[1, 25,  4, 17],
[1, 17,  5, 27],
[2, 28,  6, 18],
[2, 18,  7, 30],
[2, 30, 10, 14],
[3, 19,  6, 29],
[3, 29,  9, 13],
[3, 13,  1, 15],
[4, 20,  8, 24],
[4, 24,  0, 16],
[4, 16,  5, 17],
[7, 18,  6, 19],
[7, 19,  3, 31],
[7, 31, 11, 23],
[8, 22,  6, 28],
[8, 28,  2, 12],
[8, 12,  0, 24],
[9, 29,  6, 22],
[9, 22,  8, 20],
[9, 20,  4, 25],
[10, 30,  7, 23],
[10, 23, 11, 21],
[10, 21,  5, 26],
[11, 31,  3, 15],
[11, 15,  1, 27],
[11, 27,  5, 21]
];
    
return polyhedron({points:vertices, polygons:faces});
}

polyh3.disdyakis_dodecahedron = function (){
// http://dmccooey.com/polyhedra/DisdyakisDodecahedron.html
var C0, C1, C2, vertices, faces;
    
C0 = sqrt(2);
C1 = (3 + 6 * sqrt(2)) / 7;
C2 = (6 + 9 * sqrt(2)) / 7;

vertices = [
[0.0, 0.0,  C2],
[0.0, 0.0, -C2],
[ C2, 0.0, 0.0],
[-C2, 0.0, 0.0],
[0.0,  C2, 0.0],
[0.0, -C2, 0.0],
[ C1, 0.0,  C1],
[ C1, 0.0, -C1],
[-C1, 0.0,  C1],
[-C1, 0.0, -C1],
[ C1,  C1, 0.0],
[ C1, -C1, 0.0],
[-C1,  C1, 0.0],
[-C1, -C1, 0.0],
[0.0,  C1,  C1],
[0.0,  C1, -C1],
[0.0, -C1,  C1],
[0.0, -C1, -C1],
[ C0,  C0,  C0],
[ C0,  C0, -C0],
[ C0, -C0,  C0],
[ C0, -C0, -C0],
[-C0,  C0,  C0],
[-C0,  C0, -C0],
[-C0, -C0,  C0],
[-C0, -C0, -C0]];

faces = [
[0,  6, 18],
[0, 18, 14],
[0, 14, 22],
[0, 22,  8],
[0,  8, 24],
[0, 24, 16],
[0, 16, 20],
[0, 20,  6],
[1,  7, 21],
[1, 21, 17],
[1, 17, 25],
[1, 25,  9],
[1,  9, 23],
[1, 23, 15],
[1, 15, 19],
[1, 19,  7],
[2,  6, 20],
[2, 20, 11],
[2, 11, 21],
[2, 21,  7],
[2,  7, 19],
[2, 19, 10],
[2, 10, 18],
[2, 18,  6],
[3,  8, 22],
[3, 22, 12],
[3, 12, 23],
[3, 23,  9],
[3,  9, 25],
[3, 25, 13],
[3, 13, 24],
[3, 24,  8],
[4, 10, 19],
[4, 19, 15],
[4, 15, 23],
[4, 23, 12],
[4, 12, 22],
[4, 22, 14],
[4, 14, 18],
[4, 18, 10],
[5, 11, 20],
[5, 20, 16],
[5, 16, 24],
[5, 24, 13],
[5, 13, 25],
[5, 25, 17],
[5, 17, 21],
[5, 21, 11]
];
    
return polyhedron({points:vertices, polygons:faces});
}

polyh3.pentakis_dodecahedron = function (){
// http://dmccooey.com/polyhedra/PentakisDodecahedron.html
var C0, C1, C2, C3, vertices, faces;

C0 = 3 * (sqrt(5) - 1) / 4;
C1 = 9 * (9 + sqrt(5)) / 76;
C2 = 9 * (7 + 5 * sqrt(5)) / 76;
C3 = 3 * (1 + sqrt(5)) / 4;

vertices = [
[ 0.0,   C0,   C3],
[ 0.0,   C0,  -C3],
[ 0.0,  -C0,   C3],
[ 0.0,  -C0,  -C3],
[  C3,  0.0,   C0],
[  C3,  0.0,  -C0],
[ -C3,  0.0,   C0],
[ -C3,  0.0,  -C0],
[  C0,   C3,  0.0],
[  C0,  -C3,  0.0],
[ -C0,   C3,  0.0],
[ -C0,  -C3,  0.0],
[  C1,  0.0,   C2],
[  C1,  0.0,  -C2],
[ -C1,  0.0,   C2],
[ -C1,  0.0,  -C2],
[  C2,   C1,  0.0],
[  C2,  -C1,  0.0],
[ -C2,   C1,  0.0],
[ -C2,  -C1,  0.0],
[ 0.0,   C2,   C1],
[ 0.0,   C2,  -C1],
[ 0.0,  -C2,   C1],
[ 0.0,  -C2,  -C1],
[ 1.5,  1.5,  1.5],
[ 1.5,  1.5, -1.5],
[ 1.5, -1.5,  1.5],
[ 1.5, -1.5, -1.5],
[-1.5,  1.5,  1.5],
[-1.5,  1.5, -1.5],
[-1.5, -1.5,  1.5],
[-1.5, -1.5, -1.5]];

faces = [
[12,  0,  2],
[12,  2, 26],
[12, 26,  4],
[12,  4, 24],
[12, 24,  0],
[13,  3,  1],
[13,  1, 25],
[13, 25,  5],
[13,  5, 27],
[13, 27,  3],
[14,  2,  0],
[14,  0, 28],
[14, 28,  6],
[14,  6, 30],
[14, 30,  2],
[15,  1,  3],
[15,  3, 31],
[15, 31,  7],
[15,  7, 29],
[15, 29,  1],
[16,  4,  5],
[16,  5, 25],
[16, 25,  8],
[16,  8, 24],
[16, 24,  4],
[17,  5,  4],
[17,  4, 26],
[17, 26,  9],
[17,  9, 27],
[17, 27,  5],
[18,  7,  6],
[18,  6, 28],
[18, 28, 10],
[18, 10, 29],
[18, 29,  7],
[19,  6,  7],
[19,  7, 31],
[19, 31, 11],
[19, 11, 30],
[19, 30,  6],
[20,  8, 10],
[20, 10, 28],
[20, 28,  0],
[20,  0, 24],
[20, 24,  8],
[21, 10,  8],
[21,  8, 25],
[21, 25,  1],
[21,  1, 29],
[21, 29, 10],
[22, 11,  9],
[22,  9, 26],
[22, 26,  2],
[22,  2, 30],
[22, 30, 11],
[23,  9, 11],
[23, 11, 31],
[23, 31,  3],
[23,  3, 27],
[23, 27,  9]];
    
return polyhedron({points:vertices, polygons:faces});
}

polyh3.triakis_icosahedron = function (){
// http://dmccooey.com/polyhedra/TriakisIcosahedron.html
var C0, C1, C2, C3, C4, vertices, faces;

C0 = 5 * (7 + sqrt(5)) / 44;
C1 = 5 * (3 + 2 * sqrt(5)) / 22;
C2 = (5 + sqrt(5)) / 4;
C3 = 5 * (13 + 5 * sqrt(5)) / 44;
C4 = (5 + 3 * sqrt(5)) / 4;

vertices = [
[ C2, 0.0,  C4],
[ C2, 0.0, -C4],
[-C2, 0.0,  C4],
[-C2, 0.0, -C4],
[ C4,  C2, 0.0],
[ C4, -C2, 0.0],
[-C4,  C2, 0.0],
[-C4, -C2, 0.0],
[0.0,  C4,  C2],
[0.0,  C4, -C2],
[0.0, -C4,  C2],
[0.0, -C4, -C2],
[0.0,  C0,  C3],
[0.0,  C0, -C3],
[0.0, -C0,  C3],
[0.0, -C0, -C3],
[ C3, 0.0,  C0],
[ C3, 0.0, -C0],
[-C3, 0.0,  C0],
[-C3, 0.0, -C0],
[ C0,  C3, 0.0],
[ C0, -C3, 0.0],
[-C0,  C3, 0.0],
[-C0, -C3, 0.0],
[ C1,  C1,  C1],
[ C1,  C1, -C1],
[ C1, -C1,  C1],
[ C1, -C1, -C1],
[-C1,  C1,  C1],
[-C1,  C1, -C1],
[-C1, -C1,  C1],
[-C1, -C1, -C1]];

faces = [
[12,  0,  8],
[12,  8,  2],
[12,  2,  0],
[13,  1,  3],
[13,  3,  9],
[13,  9,  1],
[14,  0,  2],
[14,  2, 10],
[14, 10,  0],
[15,  1, 11],
[15, 11,  3],
[15,  3,  1],
[16,  0,  5],
[16,  5,  4],
[16,  4,  0],
[17,  1,  4],
[17,  4,  5],
[17,  5,  1],
[18,  2,  6],
[18,  6,  7],
[18,  7,  2],
[19,  3,  7],
[19,  7,  6],
[19,  6,  3],
[20,  4,  9],
[20,  9,  8],
[20,  8,  4],
[21,  5, 10],
[21, 10, 11],
[21, 11,  5],
[22,  6,  8],
[22,  8,  9],
[22,  9,  6],
[23,  7, 11],
[23, 11, 10],
[23, 10,  7],
[24,  0,  4],
[24,  4,  8],
[24,  8,  0],
[25,  1,  9],
[25,  9,  4],
[25,  4,  1],
[26,  0, 10],
[26, 10,  5],
[26,  5,  0],
[27,  1,  5],
[27,  5, 11],
[27, 11,  1],
[28,  2,  8],
[28,  8,  6],
[28,  6,  2],
[29,  3,  6],
[29,  6,  9],
[29,  9,  3],
[30,  2,  7],
[30,  7, 10],
[30, 10,  2],
[31,  3, 11],
[31, 11,  7],
[31,  7,  3]];
    
return polyhedron({points:vertices, polygons:faces});
}

polyh3.deltoidal_hexecontahedron = function (){
// http://dmccooey.com/polyhedra/DeltoidalHexecontahedron.html
var C0, C1, C2, C3, C4, C5, C6, C7, C8, vertices, faces;

C0 = (5 - sqrt(5)) / 4;
C1 = (15 + sqrt(5)) / 22;
C2 = sqrt(5) / 2;
C3 = (5 + sqrt(5)) / 6;
C4 = (5 + 4 * sqrt(5)) / 11;
C5 = (5 + sqrt(5)) / 4;
C6 = (5 + 3 * sqrt(5)) / 6;
C7 = (25 + 9 * sqrt(5)) / 22;
C8 = sqrt(5);

vertices = [
[0.0, 0.0,  C8],
[0.0, 0.0, -C8],
[ C8, 0.0, 0.0],
[-C8, 0.0, 0.0],
[0.0,  C8, 0.0],
[0.0, -C8, 0.0],
[0.0,  C1,  C7],
[0.0,  C1, -C7],
[0.0, -C1,  C7],
[0.0, -C1, -C7],
[ C7, 0.0,  C1],
[ C7, 0.0, -C1],
[-C7, 0.0,  C1],
[-C7, 0.0, -C1],
[ C1,  C7, 0.0],
[ C1, -C7, 0.0],
[-C1,  C7, 0.0],
[-C1, -C7, 0.0],
[ C3, 0.0,  C6],
[ C3, 0.0, -C6],
[-C3, 0.0,  C6],
[-C3, 0.0, -C6],
[ C6,  C3, 0.0],
[ C6, -C3, 0.0],
[-C6,  C3, 0.0],
[-C6, -C3, 0.0],
[0.0,  C6,  C3],
[0.0,  C6, -C3],
[0.0, -C6,  C3],
[0.0, -C6, -C3],
[ C0,  C2,  C5],
[ C0,  C2, -C5],
[ C0, -C2,  C5],
[ C0, -C2, -C5],
[-C0,  C2,  C5],
[-C0,  C2, -C5],
[-C0, -C2,  C5],
[-C0, -C2, -C5],
[ C5,  C0,  C2],
[ C5,  C0, -C2],
[ C5, -C0,  C2],
[ C5, -C0, -C2],
[-C5,  C0,  C2],
[-C5,  C0, -C2],
[-C5, -C0,  C2],
[-C5, -C0, -C2],
[ C2,  C5,  C0],
[ C2,  C5, -C0],
[ C2, -C5,  C0],
[ C2, -C5, -C0],
[-C2,  C5,  C0],
[-C2,  C5, -C0],
[-C2, -C5,  C0],
[-C2, -C5, -C0],
[ C4,  C4,  C4],
[ C4,  C4, -C4],
[ C4, -C4,  C4],
[ C4, -C4, -C4],
[-C4,  C4,  C4],
[-C4,  C4, -C4],
[-C4, -C4,  C4],
[-C4, -C4, -C4]];

faces = [
[18,  0,  8, 32],
[18, 32, 56, 40],
[18, 40, 10, 38],
[18, 38, 54, 30],
[18, 30,  6,  0],
[19,  1,  7, 31],
[19, 31, 55, 39],
[19, 39, 11, 41],
[19, 41, 57, 33],
[19, 33,  9,  1],
[20,  0,  6, 34],
[20, 34, 58, 42],
[20, 42, 12, 44],
[20, 44, 60, 36],
[20, 36,  8,  0],
[21,  1,  9, 37],
[21, 37, 61, 45],
[21, 45, 13, 43],
[21, 43, 59, 35],
[21, 35,  7,  1],
[22,  2, 11, 39],
[22, 39, 55, 47],
[22, 47, 14, 46],
[22, 46, 54, 38],
[22, 38, 10,  2],
[23,  2, 10, 40],
[23, 40, 56, 48],
[23, 48, 15, 49],
[23, 49, 57, 41],
[23, 41, 11,  2],
[24,  3, 12, 42],
[24, 42, 58, 50],
[24, 50, 16, 51],
[24, 51, 59, 43],
[24, 43, 13,  3],
[25,  3, 13, 45],
[25, 45, 61, 53],
[25, 53, 17, 52],
[25, 52, 60, 44],
[25, 44, 12,  3],
[26,  4, 16, 50],
[26, 50, 58, 34],
[26, 34,  6, 30],
[26, 30, 54, 46],
[26, 46, 14,  4],
[27,  4, 14, 47],
[27, 47, 55, 31],
[27, 31,  7, 35],
[27, 35, 59, 51],
[27, 51, 16,  4],
[28,  5, 15, 48],
[28, 48, 56, 32],
[28, 32,  8, 36],
[28, 36, 60, 52],
[28, 52, 17,  5],
[29,  5, 17, 53],
[29, 53, 61, 37],
[29, 37,  9, 33],
[29, 33, 57, 49],
[29, 49, 15,  5]];
    
return polyhedron({points:vertices, polygons:faces});
}

polyh3.pentagonal_hexecontahedron_dextro = function (){
// http://dmccooey.com/polyhedra/RpentagonalHexecontahedron.html
var phi, x, C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, C15
, C16, C17, C18, C19 , vertices, faces;

phi = (1 + sqrt(5)) / 2;
x = Math.cbrt((phi + sqrt(phi-5/27))/2) + Math.cbrt((phi - sqrt(phi-5/27))/2);
C0  = phi * sqrt(3 - (x*x)) / 2;
C1  = phi * sqrt((x - 1 - (1/x)) * phi) / (2 * x);
C2  = phi * sqrt((x - 1 - (1/x)) * phi) / 2;
C3  = (x*x) * phi * sqrt(3 - (x*x)) / 2;
C4  = phi * sqrt(1 - x + (1 + phi) / x) / 2;
C5  = sqrt(x * (x + phi) + 1) / (2 * x);
C6  = sqrt((x + 2) * phi + 2) / (2 * x);
C7  = sqrt(-(x*x) * (2 + phi) + x * (1 + 3 * phi) + 4) / 2;
C8  = (1 + phi) * sqrt(1 + (1/x)) / (2 * x);
C9  = sqrt(2 + 3 * phi - 2 * x + (3/x)) / 2;
C10 = sqrt((x*x)*(392 + 225*phi) + x*(249 + 670*phi) + (470 + 157*phi))/62;
C11 = phi * sqrt(x * (x + phi) + 1) / (2 * x);
C12 = phi * sqrt((x*x) + x + 1 + phi) / (2 * x);
C13 = phi * sqrt((x*x) + 2 * x * phi + 2) / (2 * x);
C14 = sqrt((x*x) * (1 + 2 * phi) - phi) / 2;
C15 = phi * sqrt((x*x) + x) / 2;
C16 = (phi*phi*phi) * sqrt(x * (x + phi) + 1) / (2 * (x*x));
C17 = sqrt((x*x)*(617 + 842*phi) + x*(919 + 1589*phi) + (627 + 784*phi))/62;
C18 = (phi*phi) * sqrt(x * (x + phi) + 1) / (2 * x);
C19 = phi * sqrt(x * (x + phi) + 1) / 2;

vertices = [
[  C0,   C1,  C19],
[  C0,  -C1, -C19],
[ -C0,  -C1,  C19],
[ -C0,   C1, -C19],
[ C19,   C0,   C1],
[ C19,  -C0,  -C1],
[-C19,  -C0,   C1],
[-C19,   C0,  -C1],
[  C1,  C19,   C0],
[  C1, -C19,  -C0],
[ -C1, -C19,   C0],
[ -C1,  C19,  -C0],
[ 0.0,   C5,  C18],
[ 0.0,   C5, -C18],
[ 0.0,  -C5,  C18],
[ 0.0,  -C5, -C18],
[ C18,  0.0,   C5],
[ C18,  0.0,  -C5],
[-C18,  0.0,   C5],
[-C18,  0.0,  -C5],
[  C5,  C18,  0.0],
[  C5, -C18,  0.0],
[ -C5,  C18,  0.0],
[ -C5, -C18,  0.0],
[ C10,  0.0,  C17],
[ C10,  0.0, -C17],
[-C10,  0.0,  C17],
[-C10,  0.0, -C17],
[ C17,  C10,  0.0],
[ C17, -C10,  0.0],
[-C17,  C10,  0.0],
[-C17, -C10,  0.0],
[ 0.0,  C17,  C10],
[ 0.0,  C17, -C10],
[ 0.0, -C17,  C10],
[ 0.0, -C17, -C10],
[  C3,  -C6,  C16],
[  C3,   C6, -C16],
[ -C3,   C6,  C16],
[ -C3,  -C6, -C16],
[ C16,  -C3,   C6],
[ C16,   C3,  -C6],
[-C16,   C3,   C6],
[-C16,  -C3,  -C6],
[  C6, -C16,   C3],
[  C6,  C16,  -C3],
[ -C6,  C16,   C3],
[ -C6, -C16,  -C3],
[  C2,   C9,  C15],
[  C2,  -C9, -C15],
[ -C2,  -C9,  C15],
[ -C2,   C9, -C15],
[ C15,   C2,   C9],
[ C15,  -C2,  -C9],
[-C15,  -C2,   C9],
[-C15,   C2,  -C9],
[  C9,  C15,   C2],
[  C9, -C15,  -C2],
[ -C9, -C15,   C2],
[ -C9,  C15,  -C2],
[  C7,   C8,  C14],
[  C7,  -C8, -C14],
[ -C7,  -C8,  C14],
[ -C7,   C8, -C14],
[ C14,   C7,   C8],
[ C14,  -C7,  -C8],
[-C14,  -C7,   C8],
[-C14,   C7,  -C8],
[  C8,  C14,   C7],
[  C8, -C14,  -C7],
[ -C8, -C14,   C7],
[ -C8,  C14,  -C7],
[  C4, -C12,  C13],
[  C4,  C12, -C13],
[ -C4,  C12,  C13],
[ -C4, -C12, -C13],
[ C13,  -C4,  C12],
[ C13,   C4, -C12],
[-C13,   C4,  C12],
[-C13,  -C4, -C12],
[ C12, -C13,   C4],
[ C12,  C13,  -C4],
[-C12,  C13,   C4],
[-C12, -C13,  -C4],
[ C11,  C11,  C11],
[ C11,  C11, -C11],
[ C11, -C11,  C11],
[ C11, -C11, -C11],
[-C11,  C11,  C11],
[-C11,  C11, -C11],
[-C11, -C11,  C11],
[-C11, -C11, -C11]];

faces = [
[24,  0,  2, 14, 36],
[24, 36, 72, 86, 76],
[24, 76, 40, 16, 52],
[24, 52, 64, 84, 60],
[24, 60, 48, 12,  0],
[25,  1,  3, 13, 37],
[25, 37, 73, 85, 77],
[25, 77, 41, 17, 53],
[25, 53, 65, 87, 61],
[25, 61, 49, 15,  1],
[26,  2,  0, 12, 38],
[26, 38, 74, 88, 78],
[26, 78, 42, 18, 54],
[26, 54, 66, 90, 62],
[26, 62, 50, 14,  2],
[27,  3,  1, 15, 39],
[27, 39, 75, 91, 79],
[27, 79, 43, 19, 55],
[27, 55, 67, 89, 63],
[27, 63, 51, 13,  3],
[28,  4,  5, 17, 41],
[28, 41, 77, 85, 81],
[28, 81, 45, 20, 56],
[28, 56, 68, 84, 64],
[28, 64, 52, 16,  4],
[29,  5,  4, 16, 40],
[29, 40, 76, 86, 80],
[29, 80, 44, 21, 57],
[29, 57, 69, 87, 65],
[29, 65, 53, 17,  5],
[30,  7,  6, 18, 42],
[30, 42, 78, 88, 82],
[30, 82, 46, 22, 59],
[30, 59, 71, 89, 67],
[30, 67, 55, 19,  7],
[31,  6,  7, 19, 43],
[31, 43, 79, 91, 83],
[31, 83, 47, 23, 58],
[31, 58, 70, 90, 66],
[31, 66, 54, 18,  6],
[32,  8, 11, 22, 46],
[32, 46, 82, 88, 74],
[32, 74, 38, 12, 48],
[32, 48, 60, 84, 68],
[32, 68, 56, 20,  8],
[33, 11,  8, 20, 45],
[33, 45, 81, 85, 73],
[33, 73, 37, 13, 51],
[33, 51, 63, 89, 71],
[33, 71, 59, 22, 11],
[34, 10,  9, 21, 44],
[34, 44, 80, 86, 72],
[34, 72, 36, 14, 50],
[34, 50, 62, 90, 70],
[34, 70, 58, 23, 10],
[35,  9, 10, 23, 47],
[35, 47, 83, 91, 75],
[35, 75, 39, 15, 49],
[35, 49, 61, 87, 69],
[35, 69, 57, 21,  9]];
    
return polyhedron({points:vertices, polygons:faces});
}

polyh3.pentagonal_hexecontahedron_laevo = function (){
// http://dmccooey.com/polyhedra/LpentagonalHexecontahedron.html
var phi, x, C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, C15
, C16, C17, C18, C19 , vertices, faces;

phi = (1 + sqrt(5)) / 2;
x = Math.cbrt((phi + sqrt(phi-5/27))/2) + Math.cbrt((phi - sqrt(phi-5/27))/2);
C0  = phi * sqrt(3 - (x*x)) / 2;
C1  = phi * sqrt((x - 1 - (1/x)) * phi) / (2 * x);
C2  = phi * sqrt((x - 1 - (1/x)) * phi) / 2;
C3  = (x*x) * phi * sqrt(3 - (x*x)) / 2;
C4  = phi * sqrt(1 - x + (1 + phi) / x) / 2;
C5  = sqrt(x * (x + phi) + 1) / (2 * x);
C6  = sqrt((x + 2) * phi + 2) / (2 * x);
C7  = sqrt(-(x*x) * (2 + phi) + x * (1 + 3 * phi) + 4) / 2;
C8  = (1 + phi) * sqrt(1 + (1/x)) / (2 * x);
C9  = sqrt(2 + 3 * phi - 2 * x + (3/x)) / 2;
C10 = sqrt((x*x)*(392 + 225*phi) + x*(249 + 670*phi) + (470 + 157*phi))/62;
C11 = phi * sqrt(x * (x + phi) + 1) / (2 * x);
C12 = phi * sqrt((x*x) + x + 1 + phi) / (2 * x);
C13 = phi * sqrt((x*x) + 2 * x * phi + 2) / (2 * x);
C14 = sqrt((x*x) * (1 + 2 * phi) - phi) / 2;
C15 = phi * sqrt((x*x) + x) / 2;
C16 = (phi*phi*phi) * sqrt(x * (x + phi) + 1) / (2 * (x*x));
C17 = sqrt((x*x)*(617 + 842*phi) + x*(919 + 1589*phi) + (627 + 784*phi))/62;
C18 = (phi*phi) * sqrt(x * (x + phi) + 1) / (2 * x);
C19 = phi * sqrt(x * (x + phi) + 1) / 2;   

vertices = [
[ -C0,  -C1, -C19],
[ -C0,   C1,  C19],
[  C0,   C1, -C19],
[  C0,  -C1,  C19],
[-C19,  -C0,  -C1],
[-C19,   C0,   C1],
[ C19,   C0,  -C1],
[ C19,  -C0,   C1],
[ -C1, -C19,  -C0],
[ -C1,  C19,   C0],
[  C1,  C19,  -C0],
[  C1, -C19,   C0],
[ 0.0,  -C5, -C18],
[ 0.0,  -C5,  C18],
[ 0.0,   C5, -C18],
[ 0.0,   C5,  C18],
[-C18,  0.0,  -C5],
[-C18,  0.0,   C5],
[ C18,  0.0,  -C5],
[ C18,  0.0,   C5],
[ -C5, -C18,  0.0],
[ -C5,  C18,  0.0],
[  C5, -C18,  0.0],
[  C5,  C18,  0.0],
[-C10,  0.0, -C17],
[-C10,  0.0,  C17],
[ C10,  0.0, -C17],
[ C10,  0.0,  C17],
[-C17, -C10,  0.0],
[-C17,  C10,  0.0],
[ C17, -C10,  0.0],
[ C17,  C10,  0.0],
[ 0.0, -C17, -C10],
[ 0.0, -C17,  C10],
[ 0.0,  C17, -C10],
[ 0.0,  C17,  C10],
[ -C3,   C6, -C16],
[ -C3,  -C6,  C16],
[  C3,  -C6, -C16],
[  C3,   C6,  C16],
[-C16,   C3,  -C6],
[-C16,  -C3,   C6],
[ C16,  -C3,  -C6],
[ C16,   C3,   C6],
[ -C6,  C16,  -C3],
[ -C6, -C16,   C3],
[  C6, -C16,  -C3],
[  C6,  C16,   C3],
[ -C2,  -C9, -C15],
[ -C2,   C9,  C15],
[  C2,   C9, -C15],
[  C2,  -C9,  C15],
[-C15,  -C2,  -C9],
[-C15,   C2,   C9],
[ C15,   C2,  -C9],
[ C15,  -C2,   C9],
[ -C9, -C15,  -C2],
[ -C9,  C15,   C2],
[  C9,  C15,  -C2],
[  C9, -C15,   C2],
[ -C7,  -C8, -C14],
[ -C7,   C8,  C14],
[  C7,   C8, -C14],
[  C7,  -C8,  C14],
[-C14,  -C7,  -C8],
[-C14,   C7,   C8],
[ C14,   C7,  -C8],
[ C14,  -C7,   C8],
[ -C8, -C14,  -C7],
[ -C8,  C14,   C7],
[  C8,  C14,  -C7],
[  C8, -C14,   C7],
[ -C4,  C12, -C13],
[ -C4, -C12,  C13],
[  C4, -C12, -C13],
[  C4,  C12,  C13],
[-C13,   C4, -C12],
[-C13,  -C4,  C12],
[ C13,  -C4, -C12],
[ C13,   C4,  C12],
[-C12,  C13,  -C4],
[-C12, -C13,   C4],
[ C12, -C13,  -C4],
[ C12,  C13,   C4],
[-C11, -C11, -C11],
[-C11, -C11,  C11],
[-C11,  C11, -C11],
[-C11,  C11,  C11],
[ C11, -C11, -C11],
[ C11, -C11,  C11],
[ C11,  C11, -C11],
[ C11,  C11,  C11]];

faces = [
[24, 36, 14,  2,  0],
[24, 76, 86, 72, 36],
[24, 52, 16, 40, 76],
[24, 60, 84, 64, 52],
[24,  0, 12, 48, 60],
[25, 37, 13,  3,  1],
[25, 77, 85, 73, 37],
[25, 53, 17, 41, 77],
[25, 61, 87, 65, 53],
[25,  1, 15, 49, 61],
[26, 38, 12,  0,  2],
[26, 78, 88, 74, 38],
[26, 54, 18, 42, 78],
[26, 62, 90, 66, 54],
[26,  2, 14, 50, 62],
[27, 39, 15,  1,  3],
[27, 79, 91, 75, 39],
[27, 55, 19, 43, 79],
[27, 63, 89, 67, 55],
[27,  3, 13, 51, 63],
[28, 41, 17,  5,  4],
[28, 81, 85, 77, 41],
[28, 56, 20, 45, 81],
[28, 64, 84, 68, 56],
[28,  4, 16, 52, 64],
[29, 40, 16,  4,  5],
[29, 80, 86, 76, 40],
[29, 57, 21, 44, 80],
[29, 65, 87, 69, 57],
[29,  5, 17, 53, 65],
[30, 42, 18,  6,  7],
[30, 82, 88, 78, 42],
[30, 59, 22, 46, 82],
[30, 67, 89, 71, 59],
[30,  7, 19, 55, 67],
[31, 43, 19,  7,  6],
[31, 83, 91, 79, 43],
[31, 58, 23, 47, 83],
[31, 66, 90, 70, 58],
[31,  6, 18, 54, 66],
[32, 46, 22, 11,  8],
[32, 74, 88, 82, 46],
[32, 48, 12, 38, 74],
[32, 68, 84, 60, 48],
[32,  8, 20, 56, 68],
[33, 45, 20,  8, 11],
[33, 73, 85, 81, 45],
[33, 51, 13, 37, 73],
[33, 71, 89, 63, 51],
[33, 11, 22, 59, 71],
[34, 44, 21,  9, 10],
[34, 72, 86, 80, 44],
[34, 50, 14, 36, 72],
[34, 70, 90, 62, 50],
[34, 10, 23, 58, 70],
[35, 47, 23, 10,  9],
[35, 75, 91, 83, 47],
[35, 49, 15, 39, 75],
[35, 69, 87, 61, 49],
[35,  9, 21, 57, 69]
];
    
return polyhedron({points:vertices, polygons:faces});
}

polyh3.disdyakis_triacontahedron = function (){
// http://dmccooey.com/polyhedra/DisdyakisTriacontahedron.html
var C0, C1, C2, C3, C4, C5, C6, C7, C8, vertices, faces;

C0 = 3 * (15 + sqrt(5)) / 44;
C1 = (5 - sqrt(5)) / 2;
C2 = 3 * (5 + 4 * sqrt(5)) / 22;
C3 = 3 * (5 + sqrt(5)) / 10;
C4 = sqrt(5);
C5 = (75 + 27 * sqrt(5)) / 44;
C6 = (15 + 9 * sqrt(5)) / 10;
C7 = (5 + sqrt(5)) / 2;
C8 = 3 * (5 + 4 * sqrt(5)) / 11;

vertices = [
[0.0, 0.0,  C8],
[0.0, 0.0, -C8],
[ C8, 0.0, 0.0],
[-C8, 0.0, 0.0],
[0.0,  C8, 0.0],
[0.0, -C8, 0.0],
[0.0,  C1,  C7],
[0.0,  C1, -C7],
[0.0, -C1,  C7],
[0.0, -C1, -C7],
[ C7, 0.0,  C1],
[ C7, 0.0, -C1],
[-C7, 0.0,  C1],
[-C7, 0.0, -C1],
[ C1,  C7, 0.0],
[ C1, -C7, 0.0],
[-C1,  C7, 0.0],
[-C1, -C7, 0.0],
[ C3, 0.0,  C6],
[ C3, 0.0, -C6],
[-C3, 0.0,  C6],
[-C3, 0.0, -C6],
[ C6,  C3, 0.0],
[ C6, -C3, 0.0],
[-C6,  C3, 0.0],
[-C6, -C3, 0.0],
[0.0,  C6,  C3],
[0.0,  C6, -C3],
[0.0, -C6,  C3],
[0.0, -C6, -C3],
[ C0,  C2,  C5],
[ C0,  C2, -C5],
[ C0, -C2,  C5],
[ C0, -C2, -C5],
[-C0,  C2,  C5],
[-C0,  C2, -C5],
[-C0, -C2,  C5],
[-C0, -C2, -C5],
[ C5,  C0,  C2],
[ C5,  C0, -C2],
[ C5, -C0,  C2],
[ C5, -C0, -C2],
[-C5,  C0,  C2],
[-C5,  C0, -C2],
[-C5, -C0,  C2],
[-C5, -C0, -C2],
[ C2,  C5,  C0],
[ C2,  C5, -C0],
[ C2, -C5,  C0],
[ C2, -C5, -C0],
[-C2,  C5,  C0],
[-C2,  C5, -C0],
[-C2, -C5,  C0],
[-C2, -C5, -C0],
[ C4,  C4,  C4],
[ C4,  C4, -C4],
[ C4, -C4,  C4],
[ C4, -C4, -C4],
[-C4,  C4,  C4],
[-C4,  C4, -C4],
[-C4, -C4,  C4],
[-C4, -C4, -C4]];

faces = [
[18,  0,  8],
[18,  8, 32],
[18, 32, 56],
[18, 56, 40],
[18, 40, 10],
[18, 10, 38],
[18, 38, 54],
[18, 54, 30],
[18, 30,  6],
[18,  6,  0],
[19,  1,  7],
[19,  7, 31],
[19, 31, 55],
[19, 55, 39],
[19, 39, 11],
[19, 11, 41],
[19, 41, 57],
[19, 57, 33],
[19, 33,  9],
[19,  9,  1],
[20,  0,  6],
[20,  6, 34],
[20, 34, 58],
[20, 58, 42],
[20, 42, 12],
[20, 12, 44],
[20, 44, 60],
[20, 60, 36],
[20, 36,  8],
[20,  8,  0],
[21,  1,  9],
[21,  9, 37],
[21, 37, 61],
[21, 61, 45],
[21, 45, 13],
[21, 13, 43],
[21, 43, 59],
[21, 59, 35],
[21, 35,  7],
[21,  7,  1],
[22,  2, 11],
[22, 11, 39],
[22, 39, 55],
[22, 55, 47],
[22, 47, 14],
[22, 14, 46],
[22, 46, 54],
[22, 54, 38],
[22, 38, 10],
[22, 10,  2],
[23,  2, 10],
[23, 10, 40],
[23, 40, 56],
[23, 56, 48],
[23, 48, 15],
[23, 15, 49],
[23, 49, 57],
[23, 57, 41],
[23, 41, 11],
[23, 11,  2],
[24,  3, 12],
[24, 12, 42],
[24, 42, 58],
[24, 58, 50],
[24, 50, 16],
[24, 16, 51],
[24, 51, 59],
[24, 59, 43],
[24, 43, 13],
[24, 13,  3],
[25,  3, 13],
[25, 13, 45],
[25, 45, 61],
[25, 61, 53],
[25, 53, 17],
[25, 17, 52],
[25, 52, 60],
[25, 60, 44],
[25, 44, 12],
[25, 12,  3],
[26,  4, 16],
[26, 16, 50],
[26, 50, 58],
[26, 58, 34],
[26, 34,  6],
[26,  6, 30],
[26, 30, 54],
[26, 54, 46],
[26, 46, 14],
[26, 14,  4],
[27,  4, 14],
[27, 14, 47],
[27, 47, 55],
[27, 55, 31],
[27, 31,  7],
[27,  7, 35],
[27, 35, 59],
[27, 59, 51],
[27, 51, 16],
[27, 16,  4],
[28,  5, 15],
[28, 15, 48],
[28, 48, 56],
[28, 56, 32],
[28, 32,  8],
[28,  8, 36],
[28, 36, 60],
[28, 60, 52],
[28, 52, 17],
[28, 17,  5],
[29,  5, 17],
[29, 17, 53],
[29, 53, 61],
[29, 61, 37],
[29, 37,  9],
[29,  9, 33],
[29, 33, 57],
[29, 57, 49],
[29, 49, 15],
[29, 15,  5]];
    
return polyhedron({points:vertices, polygons:faces});
}

}

// fin include

const DK = 15, Z=6;

function csgFromSegments (segments) {
  let output = [];
  segments.forEach(segment => output.push(
    rectangular_extrude(segment, { w:2, h:1 })
  ));
  return union(output);
}

function main(){
  polyh3();

  r = [];

  r.push(color("darkorange", polyh3.triakis_tetrahedron().scale(4).translate([-DK*2,DK,Z])));
  r.push(color("lime", polyh3.rhombic_dodecahedron().scale(6).translate([-DK,DK,Z])));
  r.push(color("purple", polyh3.tetrakis_hexahedron().scale(3.5).translate([0,DK,Z])));
  r.push(color("crimson", polyh3.triakis_octahedron().scale(2.5).translate([DK,DK,Z])));

  r.push(color("magenta", polyh3.deltoidal_icositetrahedron().scale(3.5).translate([-DK*2,0,Z])));
  r.push(color("blue", polyh3.pentagonal_icositetrahedron_dextro().scale(4).translate([-DK,0,Z])));
  r.push(color("yellow",polyh3.pentagonal_icositetrahedron_laevo().scale(4).translate([0,0,Z])));
  r.push(color("green", polyh3.rhombic_triacontahedron().scale(3.5).translate([DK,0,Z])));

  r.push(color("red", polyh3.disdyakis_dodecahedron().scale(2).translate([-DK*2,-DK,Z])));
  r.push(color("lightblue", polyh3.pentakis_dodecahedron().scale(2).translate([-DK,-DK,Z])));
  r.push(color("orange", polyh3.triakis_icosahedron().scale(1.6).translate([0,-DK,Z])));
  r.push(color("beige", polyh3.deltoidal_hexecontahedron().scale(2.25).translate([DK,-DK,Z])));

  r.push(color("lavender", polyh3.pentagonal_hexecontahedron_dextro().scale(2).translate([-DK*2,-DK*2,Z])));
  r.push(color("cyan", polyh3.pentagonal_hexecontahedron_laevo().scale(2).translate([-DK,-DK*2,Z])));
  r.push(color("indigo", polyh3.disdyakis_triacontahedron().scale(1.25).translate([0,-DK*2,Z])));
  
  r.push(csgFromSegments(vectorText("SOLIDES DE CATALAN")).scale(0.25).translate([-50,-40,0]));

  return r;
}
