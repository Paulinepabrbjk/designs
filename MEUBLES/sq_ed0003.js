const jscad = require('@jscad/modeling')
const { curves, maths, extrusions, primitives, transforms, booleans, 
	colors, geometries, measurements, utils } = jscad
const { bezier } = curves
const { slice, extrudeLinear } = extrusions
const { cuboid, polygon, polyhedron } = primitives
const { intersect, subtract,union } = booleans
const { center, scale, translateX, translateY, translateZ, translate
		,rotateX, rotateY, rotateZ } = transforms
const { colorize } = colors
const { geom3, poly3 } = geometries
const { vec3 } = maths
const { measureBoundingBox, measureArea } = measurements
const { degToRad } = utils

const getParameterDefinitions = () => {
  return [
    {name: 'g1', caption: 'Lignes', type: 'group'},
    {name: 'l0', caption: '#1:', type: 'slider', min:"0", max:"100", step:"1", initial:"50"},
    {name: 'l1', caption: '#2:', type: 'slider', min:"0", max:"100", step:"1", initial:"0"},
    {name: 'l2', caption: '#3:', type: 'slider', min:"0", max:"100", step:"1", initial:"0"},
    {name: 'l3', caption: '#4:', type: 'slider', min:"0", max:"100", step:"1", initial:"0"},
    {name: 'l4', caption: '#5:', type: 'slider', min:"0", max:"100", step:"1", initial:"0"},
    {name: 'l5', caption: '#6:', type: 'slider', min:"0", max:"100", step:"1", initial:"0"},
    {name: 'l6', caption: '#7:', type: 'slider', min:"0", max:"100", step:"1", initial:"0"},
    {name: 'l7', caption: '#8:', type: 'slider', min:"0", max:"100", step:"1", initial:"0"},
    {name: 'l8', caption: '#9:', type: 'slider', min:"0", max:"100", step:"1", initial:"0"},
    {name: 'l9', caption: '#10:',type: 'slider', min:"0", max:"100", step:"1", initial:"0"},

    {name: 'g2', caption: 'Colonnes', type: 'group'},
    {name: 'c0', caption: '#1:', type: 'slider', min:"0", max:"100", step:"1", initial:"50"},
    {name: 'c1', caption: '#2:', type: 'slider', min:"0", max:"100", step:"1", initial:"0"},
    {name: 'c2', caption: '#3:', type: 'slider', min:"0", max:"100", step:"1", initial:"0"},
    {name: 'c3', caption: '#4:', type: 'slider', min:"0", max:"100", step:"1", initial:"0"},
    {name: 'c4', caption: '#5:', type: 'slider', min:"0", max:"100", step:"1", initial:"0"},
    {name: 'c5', caption: '#6:', type: 'slider', min:"0", max:"100", step:"1", initial:"0"},
    {name: 'c6', caption: '#7:', type: 'slider', min:"0", max:"100", step:"1", initial:"0"},
    {name: 'c7', caption: '#8:', type: 'slider', min:"0", max:"100", step:"1", initial:"0"},
    {name: 'c8', caption: '#9:', type: 'slider', min:"0", max:"100", step:"1", initial:"0"},
    {name: 'c9', caption: '#10:',type: 'slider', min:"0", max:"100", step:"1", initial:"0"},

    {name: 'g3', caption: 'Parametres', type: 'group'},
    //,{name: 'v', type:'text', caption: 'volume:', initial: 'test'}
    ,{name: 'ep', type:'float', caption: 'ep (mm):', initial: 6.0}    

   ];
}

volume = function () {
  const faces =[[0,30,29],[0,31,28],[0,32,30],[1,36,48],[1,40,16],[1,53,10],[1,56,50],[2,38,49],[2,42,17],[2,54,51],[2,58,11],[3,53,52],[3,54,11],[3,56,10],[3,58,57],[3,61,55],[4,37,30],[4,137,37],[5,23,35],[5,35,31],[6,34,32],[6,87,34],[7,58,25],[7,61,57],[7,163,162],[7,165,59],[8,53,23],[8,54,52],[9,56,55],[9,61,60],[9,109,22],[9,113,108],[10,53,3],[10,56,1],[11,54,2],[11,58,3],[12,35,23],[12,36,19],[12,53,48],[13,40,50],[13,56,22],[13,93,26],[13,109,103],[14,41,27],[14,42,51],[14,54,24],[15,38,20],[15,58,49],[15,143,154],[15,163,25],[16,28,36],[16,36,1],[17,29,38],[17,38,2],[18,112,21],[18,140,33],[18,192,140],[18,216,192],[19,35,12],[19,36,35],[20,38,37],[20,143,15],[21,61,59],[21,113,60],[21,165,164],[21,216,18],[21,217,216],[22,56,9],[22,109,13],[23,24,8],[23,53,12],[24,23,5],[24,41,14],[24,54,8],[25,58,15],[25,163,7],[26,40,13],[26,93,39],[27,42,14],[28,32,0],[29,31,0],[30,33,4],[30,37,45],[31,35,44],[31,41,5],[32,34,43],[32,39,6],[33,34,18],[33,137,4],[33,140,148],[34,88,18],[37,143,20],[39,40,26],[39,87,6],[40,28,16],[40,39,46],[41,24,5],[41,42,27],[42,29,17],[42,41,47],[43,30,32],[43,33,30],[43,34,33],[44,28,31],[44,35,36],[44,36,28],[45,29,30],[45,37,38],[45,38,29],[46,28,40],[46,32,28],[46,39,32],[47,29,42],[47,31,29],[47,41,31],[48,36,12],[48,53,1],[49,38,15],[49,58,2],[50,40,1],[50,56,13],[51,42,2],[51,54,14],[52,53,8],[52,54,3],[55,56,3],[55,61,9],[57,58,7],[57,61,3],[59,61,7],[59,165,21],[60,61,21],[60,113,9],[62,86,84],[62,87,83],[63,90,75],[63,93,103],[63,106,101],[63,109,70],[64,92,76],[64,95,104],[64,107,71],[64,111,102],[65,106,70],[65,107,105],[65,109,108],[65,111,71],[65,113,110],[66,68,88],[66,88,85],[67,80,94],[67,94,86],[68,66,81],[68,111,110],[68,113,112],[69,80,79],[69,106,105],[69,107,80],[70,106,63],[70,109,65],[71,107,65],[71,111,64],[72,89,77],[72,90,101],[72,106,79],[73,94,80],[73,95,82],[73,107,104],[74,91,78],[74,92,102],[74,111,81],[75,83,93],[75,93,63],[76,84,95],[76,95,64],[77,90,72],[78,92,74],[79,80,67],[79,89,72],[79,106,69],[80,107,73],[81,91,74],[81,111,68],[82,94,73],[82,95,94],[83,86,62],[83,87,99],[83,90,97],[84,85,62],[84,86,100],[84,92,98],[85,84,98],[85,87,62],[85,88,96],[85,91,66],[86,83,97],[86,89,67],[86,94,100],[87,39,99],[87,85,96],[88,34,96],[88,112,18],[89,79,67],[89,90,77],[90,83,75],[90,89,97],[91,81,66],[91,92,78],[92,84,76],[92,91,98],[93,83,99],[95,84,100],[96,34,87],[97,89,86],[98,91,85],[99,39,93],[100,94,95],[101,90,63],[101,106,72],[102,92,64],[102,111,74],[103,93,13],[103,109,63],[104,95,73],[104,107,64],[105,106,65],[105,107,69],[108,109,9],[108,113,65],[110,111,65],[110,113,68],[112,88,68],[112,113,21],[114,138,136],[114,139,135],[115,142,127],[115,145,155],[115,158,153],[115,161,122],[116,143,128],[116,147,156],[116,159,123],[116,163,154],[117,158,122],[117,159,157],[117,161,160],[117,163,123],[117,165,162],[118,131,132],[118,132,146],[118,146,138],[119,144,139],[119,191,144],[120,132,131],[120,158,157],[120,159,132],[121,161,130],[121,165,160],[121,213,212],[121,217,164],[122,158,115],[122,161,117],[123,159,117],[123,163,116],[124,141,129],[124,142,153],[124,158,131],[125,145,133],[125,161,155],[125,197,207],[125,213,130],[126,146,132],[126,147,134],[126,159,156],[127,135,145],[127,145,115],[128,136,147],[128,147,116],[129,142,124],[130,161,125],[130,213,121],[131,141,124],[131,158,120],[132,159,126],[133,145,144],[133,197,125],[134,146,126],[134,147,146],[135,138,114],[135,139,151],[135,142,149],[136,137,114],[136,138,152],[136,143,150],[137,33,148],[137,136,150],[137,139,114],[138,135,149],[138,141,118],[138,146,152],[139,137,148],[139,140,119],[139,144,151],[140,191,119],[141,131,118],[141,142,129],[142,135,127],[142,141,149],[143,37,150],[143,136,128],[144,197,133],[145,135,151],[147,136,152],[148,140,139],[149,141,138],[150,37,137],[151,144,145],[152,146,147],[153,142,115],[153,158,124],[154,143,116],[154,163,15],[155,145,125],[155,161,115],[156,147,126],[156,159,116],[157,158,117],[157,159,120],[160,161,121],[160,165,117],[162,163,117],[162,165,7],[164,165,121],[164,217,21],[166,189,188],[166,190,187],[166,191,189],[167,194,205],[167,197,179],[167,210,174],[167,213,207],[168,196,206],[168,199,180],[168,211,208],[168,215,175],[169,210,209],[169,211,175],[169,213,174],[169,215,214],[169,217,212],[170,185,195],[170,195,189],[171,183,193],[171,193,190],[172,192,216],[172,215,185],[172,217,214],[173,210,183],[173,211,209],[174,210,169],[174,213,167],[175,211,168],[175,215,169],[176,193,183],[176,194,181],[176,210,205],[177,198,186],[177,199,208],[177,211,184],[178,195,185],[178,196,182],[178,215,206],[179,187,194],[179,194,167],[180,188,196],[180,196,168],[181,193,176],[181,194,193],[182,195,178],[182,196,195],[183,171,184],[183,184,173],[183,210,176],[184,198,177],[184,211,173],[185,170,172],[185,215,178],[186,199,177],[187,191,166],[188,190,166],[189,192,170],[189,195,202],[190,193,201],[190,198,171],[191,140,200],[192,172,170],[197,144,203],[197,187,179],[198,184,171],[198,199,186],[199,188,180],[199,198,204],[200,140,192],[200,189,191],[200,192,189],[201,187,190],[201,193,194],[201,194,187],[202,188,189],[202,195,196],[202,196,188],[203,144,191],[203,187,197],[203,191,187],[204,188,199],[204,190,188],[204,198,190],[205,194,176],[205,210,167],[206,196,178],[206,215,168],[207,197,167],[207,213,125],[208,199,168],[208,211,177],[209,210,173],[209,211,169],[212,213,169],[212,217,121],[214,215,172],[214,217,169],[216,217,172]]
  const vertices = [[150.96713458,24.55143339,150.96713458],[189.47151111,-25.45740243,94.72543333],[94.72543333,-25.45740243,189.47151111],[103.98678756,-22.9342811,103.98678756],[-6.0853544e-15,62.19591885,139.927436],[180.63243183,-120.18283576,180.63243183],[139.927436,62.19591885,-5.362866e-15],[-6.0853544e-15,-4.41074687,97.35755556],[126.30057778,-120.18283576,126.30057778],[97.35755556,-4.41074687,-5.362866e-15],[157.88604444,-33.3537691,86.82906667],[86.82906667,-33.3537691,157.88604444],[189.47151111,-120.18283576,126.30057778],[189.47151111,6.11774201,-5.362866e-15],[126.30057778,-120.18283576,189.47151111],[-6.0853544e-15,6.11774201,189.47151111],[200,-11.63618021,108.54665556],[108.54665556,-11.63618021,200],[-6.0853544e-15,62.19591885,-5.362866e-15],[200,-120.18283576,148.01816667],[-6.0853544e-15,27.8353309,200],[-6.0853544e-15,-4.41074687,-5.362866e-15],[157.88604444,-4.41074687,-5.362866e-15],[157.88604444,-120.18283576,115.77208889],[115.77208889,-120.18283576,157.88604444],[-6.0853544e-15,-4.41074687,157.88604444],[200,27.8353309,-5.362866e-15],[148.01816667,-120.18283576,200],[182.32184144,5.14220546,127.22016922],[127.22016922,5.14220546,182.32184144],[77.88078033,62.19591885,142.354872],[174.42547478,-46.1712751,174.42547478],[142.354872,62.19591885,77.88078033],[-6.0853544e-15,62.19591885,76.61829067],[76.61829067,62.19591885,-5.362866e-15],[191.42010733,-120.18283576,165.42919067],[200,-60.9755691,138.15028889],[-6.0853544e-15,44.61464557,176.61829067],[59.20726667,17.96745313,200],[176.61829067,44.61464557,-5.362866e-15],[200,17.96745313,59.20726667],[165.42919067,-120.18283576,191.42010733],[138.15028889,-60.9755691,200],[78.23658133,62.19591885,78.23658133],[188.10445911,-51.10603976,157.17960356],[70.34021467,35.73334913,178.23658133],[178.23658133,35.73334913,70.34021467],[157.17960356,-51.10603976,188.10445911],[189.47151111,-72.8201191,110.51300556],[47.36271667,-9.66983021,189.47151111],[189.47151111,-9.66983021,47.36271667],[110.51300556,-72.8201191,189.47151111],[115.14368267,-71.55855843,115.14368267],[157.88604444,-76.76830243,101.30057778],[101.30057778,-76.76830243,157.88604444],[100.67217156,-13.67251399,51.99339378],[157.88604444,-18.88225799,43.41453333],[51.99339378,-13.67251399,100.67217156],[43.41453333,-18.88225799,157.88604444],[-6.0853544e-15,-4.41074687,48.67877778],[48.67877778,-4.41074687,-5.362866e-15],[50.33608578,-9.04163043,50.33608578],[150.96713458,24.55143339,-150.96713458],[189.47151111,-25.45740243,-94.72543333],[94.72543333,-25.45740243,-189.47151111],[103.98678756,-22.9342811,-103.98678756],[-2.3848923e-14,62.19591885,-139.927436],[180.63243183,-120.18283576,-180.63243183],[-2.3848923e-14,-4.41074687,-97.35755556],[126.30057778,-120.18283576,-126.30057778],[157.88604444,-33.3537691,-86.82906667],[86.82906667,-33.3537691,-157.88604444],[189.47151111,-120.18283576,-126.30057778],[126.30057778,-120.18283576,-189.47151111],[-4.1612491e-14,6.11774201,-189.47151111],[200,-11.63618021,-108.54665556],[108.54665556,-11.63618021,-200],[200,-120.18283576,-148.01816667],[-4.1612491e-14,27.8353309,-200],[157.88604444,-120.18283576,-115.77208889],[115.77208889,-120.18283576,-157.88604444],[-2.3848923e-14,-4.41074687,-157.88604444],[148.01816667,-120.18283576,-200],[182.32184144,5.14220546,-127.22016922],[127.22016922,5.14220546,-182.32184144],[77.88078033,62.19591885,-142.354872],[174.42547478,-46.1712751,-174.42547478],[142.354872,62.19591885,-77.88078033],[-2.3848923e-14,62.19591885,-76.61829067],[191.42010733,-120.18283576,-165.42919067],[200,-60.9755691,-138.15028889],[-4.1612491e-14,44.61464557,-176.61829067],[59.20726667,17.96745313,-200],[200,17.96745313,-59.20726667],[165.42919067,-120.18283576,-191.42010733],[138.15028889,-60.9755691,-200],[78.23658133,62.19591885,-78.23658133],[188.10445911,-51.10603976,-157.17960356],[70.34021467,35.73334913,-178.23658133],[178.23658133,35.73334913,-70.34021467],[157.17960356,-51.10603976,-188.10445911],[189.47151111,-72.8201191,-110.51300556],[47.36271667,-9.66983021,-189.47151111],[189.47151111,-9.66983021,-47.36271667],[110.51300556,-72.8201191,-189.47151111],[115.14368267,-71.55855843,-115.14368267],[157.88604444,-76.76830243,-101.30057778],[101.30057778,-76.76830243,-157.88604444],[100.67217156,-13.67251399,-51.99339378],[157.88604444,-18.88225799,-43.41453333],[51.99339378,-13.67251399,-100.67217156],[43.41453333,-18.88225799,-157.88604444],[-2.3848923e-14,-4.41074687,-48.67877778],[50.33608578,-9.04163043,-50.33608578],[-150.96713458,24.55143339,150.96713458],[-189.47151111,-25.45740243,94.72543333],[-94.72543333,-25.45740243,189.47151111],[-103.98678756,-22.9342811,103.98678756],[-180.63243183,-120.18283576,180.63243183],[-139.927436,62.19591885,-5.362866e-15],[-126.30057778,-120.18283576,126.30057778],[-97.35755556,-4.41074687,-5.362866e-15],[-157.88604444,-33.3537691,86.82906667],[-86.82906667,-33.3537691,157.88604444],[-189.47151111,-120.18283576,126.30057778],[-189.47151111,6.11774201,-5.362866e-15],[-126.30057778,-120.18283576,189.47151111],[-200,-11.63618021,108.54665556],[-108.54665556,-11.63618021,200],[-200,-120.18283576,148.01816667],[-157.88604444,-4.41074687,-5.362866e-15],[-157.88604444,-120.18283576,115.77208889],[-115.77208889,-120.18283576,157.88604444],[-200,27.8353309,-5.362866e-15],[-148.01816667,-120.18283576,200],[-182.32184144,5.14220546,127.22016922],[-127.22016922,5.14220546,182.32184144],[-77.88078033,62.19591885,142.354872],[-174.42547478,-46.1712751,174.42547478],[-142.354872,62.19591885,77.88078033],[-76.61829067,62.19591885,-5.362866e-15],[-191.42010733,-120.18283576,165.42919067],[-200,-60.9755691,138.15028889],[-59.20726667,17.96745313,200],[-176.61829067,44.61464557,-5.362866e-15],[-200,17.96745313,59.20726667],[-165.42919067,-120.18283576,191.42010733],[-138.15028889,-60.9755691,200],[-78.23658133,62.19591885,78.23658133],[-188.10445911,-51.10603976,157.17960356],[-70.34021467,35.73334913,178.23658133],[-178.23658133,35.73334913,70.34021467],[-157.17960356,-51.10603976,188.10445911],[-189.47151111,-72.8201191,110.51300556],[-47.36271667,-9.66983021,189.47151111],[-189.47151111,-9.66983021,47.36271667],[-110.51300556,-72.8201191,189.47151111],[-115.14368267,-71.55855843,115.14368267],[-157.88604444,-76.76830243,101.30057778],[-101.30057778,-76.76830243,157.88604444],[-100.67217156,-13.67251399,51.99339378],[-157.88604444,-18.88225799,43.41453333],[-51.99339378,-13.67251399,100.67217156],[-43.41453333,-18.88225799,157.88604444],[-48.67877778,-4.41074687,-5.362866e-15],[-50.33608578,-9.04163043,50.33608578],[-150.96713458,24.55143339,-150.96713458],[-189.47151111,-25.45740243,-94.72543333],[-94.72543333,-25.45740243,-189.47151111],[-103.98678756,-22.9342811,-103.98678756],[1.1678214e-14,62.19591885,-139.927436],[-180.63243183,-120.18283576,-180.63243183],[1.1678214e-14,-4.41074687,-97.35755556],[-126.30057778,-120.18283576,-126.30057778],[-157.88604444,-33.3537691,-86.82906667],[-86.82906667,-33.3537691,-157.88604444],[-189.47151111,-120.18283576,-126.30057778],[-126.30057778,-120.18283576,-189.47151111],[2.9441782e-14,6.11774201,-189.47151111],[-200,-11.63618021,-108.54665556],[-108.54665556,-11.63618021,-200],[-200,-120.18283576,-148.01816667],[2.9441782e-14,27.8353309,-200],[-157.88604444,-120.18283576,-115.77208889],[-115.77208889,-120.18283576,-157.88604444],[1.1678214e-14,-4.41074687,-157.88604444],[-148.01816667,-120.18283576,-200],[-182.32184144,5.14220546,-127.22016922],[-127.22016922,5.14220546,-182.32184144],[-77.88078033,62.19591885,-142.354872],[-174.42547478,-46.1712751,-174.42547478],[-142.354872,62.19591885,-77.88078033],[1.1678214e-14,62.19591885,-76.61829067],[-191.42010733,-120.18283576,-165.42919067],[-200,-60.9755691,-138.15028889],[2.9441782e-14,44.61464557,-176.61829067],[-59.20726667,17.96745313,-200],[-200,17.96745313,-59.20726667],[-165.42919067,-120.18283576,-191.42010733],[-138.15028889,-60.9755691,-200],[-78.23658133,62.19591885,-78.23658133],[-188.10445911,-51.10603976,-157.17960356],[-70.34021467,35.73334913,-178.23658133],[-178.23658133,35.73334913,-70.34021467],[-157.17960356,-51.10603976,-188.10445911],[-189.47151111,-72.8201191,-110.51300556],[-47.36271667,-9.66983021,-189.47151111],[-189.47151111,-9.66983021,-47.36271667],[-110.51300556,-72.8201191,-189.47151111],[-115.14368267,-71.55855843,-115.14368267],[-157.88604444,-76.76830243,-101.30057778],[-101.30057778,-76.76830243,-157.88604444],[-100.67217156,-13.67251399,-51.99339378],[-157.88604444,-18.88225799,-43.41453333],[-51.99339378,-13.67251399,-100.67217156],[-43.41453333,-18.88225799,-157.88604444],[1.1678214e-14,-4.41074687,-48.67877778],[-50.33608578,-9.04163043,-50.33608578]]
  const groups = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
return {faces:faces, vertices:vertices, groups:groups}
}

const main = (params) => {
  const sc = 1, ep = params.ep *2

	//const vv = require('./' + params.v + '.obj')
	//const vv = require('./0002.obj')
	const vd = volume()
	const vv = polyhedron({points: vd.vertices, faces: vd.faces})

  let vol = center({}, rotateX(degToRad(90), vv))
  
  let r = [], rH = [], rV = []
  let bV = measureBoundingBox(vol)
  //vol = translate([-bV[0][0], -bV[0][1], -bV[0][2]], vol)
  //bV = measureBoundingBox(vol)

	// Recup parametres
  const pv = Object.values(params)
  const lH = pv.slice(0,10).filter(Number).map(x => (x-50)/100)
  const lV = pv.slice(10,20).filter(Number).map(x => (x-50)/100)
  
	console.log(pv,lH, lV)
	// 1°) Traverses en X (H)
  fH = bV[1][0] - bV[0][0]
  mH = (bV[1][0] + bV[0][0]) / 2
  var trH = cuboid( {
		size: [ ep, 1+bV[1][1]- bV[0][1], 1+bV[1][2] - bV[0][2] ]} )
	for (let i = 0; i < lH.length; i++){
		var t = intersect(vol, translateX(fH * lH[i], trH))
		if (t.polygons.length > 0)
			rH.push(t)
	}

	// 2°) Traverses en Y (V)
	fV = bV[1][1] - bV[0][1]
	mV = (bV[1][1] + bV[0][1]) / 2
	var trV = cuboid( {
		size: [ 1+ bV[1][0] - bV[0][0], ep, 1+ bV[1][2] - bV[0][2] ]} )	
	for (let i = 0; i < lV.length; i++){
		var t = intersect(vol, translateY(fV * lV[i], trV))
		if (t.polygons.length > 0)
			rV.push(t)
	}
	
	// 3°) Entrecroisement
	var ur = union(intersect(union(rH), union(rV)));
	var tmp = scission3d(ur)  
	var eS = [], eH = [], eV = [];
	for(let i=0; i< tmp.length; i++){
		let p = tmp[i];
		let b = measureBoundingBox(p), 
				d = vec3.subtract(b[1], b[0]);
		let c1 = translate([b[0][0], b[0][1] + ep/2, b[0][2]], 
					cuboid({size: [d[0], d[1]*2, d[2]]}));
		let c2 = translate([b[0][0] + ep/2, b[0][1], b[1][2]], 
					cuboid({size: [d[0]*2, d[1], d[2]]}));
		
		eH.push(intersect(tmp[i], c1));
		eV.push(intersect(tmp[i], c2));
	}
	
	rH = rH.map(x=> subtract(x, eV));
	rV = rV.map(x=> subtract(x, eH));

	// 3d
	//r.push(colorize([0,1,0], translateX(-70, vol)));
	//r.push(colorize([1,0,0], translateX(32-70, rH)));
	//r.push(colorize([0,0,1], translateX(-32-70, rV)));
	
	// 2d
	
	console.log("haut.", fV, fH)
	var dk = Math.max(fV, fH) +1
	for(let ih = 0; ih < rH.length; ih++){
		let b = measureBoundingBox(rH[ih]);
		r.push(translate([dk *ih, dk/2], union(vol2surf(rH[ih], 'x', b[0][0]))))
		//r.push(translateX(dk *ih, vol2surf(rH[ih], 'x', b[0][0])))
	}
	for(let iv = 0; iv < rV.length; iv++){
		let b = measureBoundingBox(rV[iv]);
		r.push(translate([dk *iv, -dk], union(vol2surf(rV[iv], 'y', b[0][1]))))
		//r.push(translate([dk *iv, -dk], vol2surf(rV[iv], 'y', b[0][1])))
	}
		
	return r;
}
function rndColors(){return [Math.random(), Math.random(), Math.random()];}
function sortNb	(E){ // returns E numerically sorted and deduplicated
	return E.sort(function(a, b) {return a-b}).filter(
	    function(item, pos, ary) {return !pos || item != ary[pos - 1]});
}
function scission3d	(geom){
  var i, Pl, j, i1, j1, ok, ti, tj, z, 
  zz = [], P, RScission, til, tjl, tii1, zzl, zzdl;
// construit table de correspondance entre Polygones (P)
// build polygons lookup table
  //P = geom.toPolygons();
  P = geom.polygons;
  
  RScission = [];
  Pl = P.length;
  for (i = 0; i < Pl; i++){
	ti = P[i].vertices;
	z = [];
	for (j = 0; j < Pl; j++){
      tj = P[j].vertices;
	  ok = false;
	  for (i1 = 0; i1 < ti.length; i1++){
	    tii1 = ti[i1];
		for(j1 = 0; j1 < tj.length; j1++)
		  if (!ok)ok = vec3.distance(tii1, tj[j1]) < 0.01;
	  }
	  if (ok)z.push(parseInt(j));
	}
	z = sortNb(z);
	zz.push({e:0, d:z});
  }

// regroupe les correspondances des polygones se touchant
// boucle ne s'arrêtant que quand deux passages retournent le même nb de polygones
// merge lookup data from linked polygons as long as possible
  ok = false;
  nElOk = 0;
  do {
    lnElOk = nElOk;
	nElOk = 0;
	for (i = 0; i < zz.length; i++){
	  if (zz[i].e >= 0) {
	    nElOk++;
		for (j = 0; j < zz[i].d.length; j++){
		  a = zz[i].d[j];
		  if (zz[a].e >= 0)
		    if (i != a) {
			  zz[i].d = sortNb(zz[i].d.concat(zz[a].d));
			  zz[a].e = -1;
			}
		}
	  }
	}
	ok = lnElOk == nElOk;
  }while (!ok);

// construit le tableau des CSG à retourner
// build array of CSG to return
  for (i = 0, zzl = zz.length; i < zzl; i++) {
    if (zz[i].e >= 0) {
			z = [];
			for (j = 0, zzdl = zz[i].d.length; j < zzdl; j++){
				z.push(P[zz[i].d[j]]);
			}
			if(z.length > 0) {
			RScission.push(geom3.create(z));
			}
	  }
  }

  return RScission;
}
function vol2surf(vol, axe, orig = 0){ // axe = 'x' | 'y' | 'z'
// retourne la surface formee par le volume avec l'axe z (à 0)
let S = [];
let X, Y, Z;

for(let n = 0; n < vol.polygons.length; n++){
  let pts = [];
  let P = vol.polygons[n];
  let ok = true;
  switch(axe){
		case 'x':
			X = 1; Y = 2; Z = 0;
			break;
		case 'y':
			X = 0; Y = 2; Z = 1;
			break;
		case 'z':
			X = 0; Y = 1; Z = 2;
			break;
	}
  for(let i=0; (i < P.vertices.length) && ok; i++){
    let pt = P.vertices[i];
    if(Math.abs(pt[Z] - orig)< 0.05){
      pts.push([pt[X], pt[Y]]);
    } else {
      ok = false;
    }
  }
  if (ok){
    if(axe == 'x'){
			S.push(polygon({points:pts.reverse()}));
		} else {
			S.push(polygon({points:pts}));
		}
  }
}

return S;
}

module.exports = { main, getParameterDefinitions }
