const jscad = require('@jscad/modeling')
const { curves, maths, extrusions, primitives, transforms, booleans, 
	colors, geometries, measurements, utils } = jscad
const { bezier } = curves
const { slice, extrudeLinear } = extrusions
const { cuboid, polygon, polyhedron } = primitives
const { intersect, subtract,union } = booleans
const { center, scale, translateX, translateY, translateZ, translate
		,rotateX, rotateY, rotateZ } = transforms
const { colorize } = colors
const { geom3, poly3 } = geometries
const { vec3 } = maths
const { measureBoundingBox, measureArea } = measurements
const { degToRad } = utils

const getParameterDefinitions = () => {
  return [
    {name: 'g1', caption: 'Lignes', type: 'group'},
    {name: 'l0', caption: '#1:', type: 'slider', min:"0", max:"100", step:"1", initial:"50"},
    {name: 'l1', caption: '#2:', type: 'slider', min:"0", max:"100", step:"1", initial:"0"},
    {name: 'l2', caption: '#3:', type: 'slider', min:"0", max:"100", step:"1", initial:"0"},
    {name: 'l3', caption: '#4:', type: 'slider', min:"0", max:"100", step:"1", initial:"0"},
    {name: 'l4', caption: '#5:', type: 'slider', min:"0", max:"100", step:"1", initial:"0"},
    {name: 'l5', caption: '#6:', type: 'slider', min:"0", max:"100", step:"1", initial:"0"},
    {name: 'l6', caption: '#7:', type: 'slider', min:"0", max:"100", step:"1", initial:"0"},
    {name: 'l7', caption: '#8:', type: 'slider', min:"0", max:"100", step:"1", initial:"0"},
    {name: 'l8', caption: '#9:', type: 'slider', min:"0", max:"100", step:"1", initial:"0"},
    {name: 'l9', caption: '#10:',type: 'slider', min:"0", max:"100", step:"1", initial:"0"},

    {name: 'g2', caption: 'Colonnes', type: 'group'},
    {name: 'c0', caption: '#1:', type: 'slider', min:"0", max:"100", step:"1", initial:"50"},
    {name: 'c1', caption: '#2:', type: 'slider', min:"0", max:"100", step:"1", initial:"0"},
    {name: 'c2', caption: '#3:', type: 'slider', min:"0", max:"100", step:"1", initial:"0"},
    {name: 'c3', caption: '#4:', type: 'slider', min:"0", max:"100", step:"1", initial:"0"},
    {name: 'c4', caption: '#5:', type: 'slider', min:"0", max:"100", step:"1", initial:"0"},
    {name: 'c5', caption: '#6:', type: 'slider', min:"0", max:"100", step:"1", initial:"0"},
    {name: 'c6', caption: '#7:', type: 'slider', min:"0", max:"100", step:"1", initial:"0"},
    {name: 'c7', caption: '#8:', type: 'slider', min:"0", max:"100", step:"1", initial:"0"},
    {name: 'c8', caption: '#9:', type: 'slider', min:"0", max:"100", step:"1", initial:"0"},
    {name: 'c9', caption: '#10:',type: 'slider', min:"0", max:"100", step:"1", initial:"0"},

    {name: 'g3', caption: 'Parametres', type: 'group'},
    //,{name: 'v', type:'text', caption: 'volume:', initial: 'test'}
    ,{name: 'ep', type:'float', caption: 'ep (mm):', initial: 6.0}    

   ];
}

volume = function () {
  const faces =[[0,5,2],[0,9,1],[0,67,3],[1,10,0],[1,20,10],[2,7,0],[2,52,6],[3,4,0],[3,45,4],[3,71,45],[4,5,0],[4,45,24],[4,48,5],[5,26,2],[5,48,26],[6,7,2],[6,21,7],[6,52,21],[7,8,0],[7,21,8],[8,9,0],[8,21,9],[9,20,1],[9,41,20],[10,11,0],[10,19,11],[10,39,19],[11,12,0],[11,19,12],[12,67,0],[12,68,67],[12,78,68],[13,53,32],[13,63,31],[13,64,30],[13,66,64],[14,53,31],[14,55,33],[14,61,40],[14,63,27],[15,53,34],[15,58,49],[15,66,32],[16,53,33],[16,54,37],[16,55,43],[16,56,36],[17,53,37],[17,54,38],[17,57,50],[17,58,34],[18,54,36],[18,56,44],[18,57,38],[18,59,35],[19,62,28],[19,78,12],[19,102,77],[19,124,102],[20,39,10],[20,55,40],[20,61,29],[20,62,39],[21,41,9],[21,55,41],[21,60,42],[22,55,42],[22,56,43],[22,59,44],[22,60,51],[23,57,35],[23,59,47],[23,61,27],[23,63,46],[24,48,4],[24,62,48],[24,124,28],[25,57,46],[25,58,50],[25,63,30],[25,65,49],[25,66,65],[26,52,2],[26,59,51],[26,60,52],[26,61,47],[26,62,29],[27,61,14],[27,63,23],[28,62,24],[28,124,19],[29,61,26],[29,62,20],[30,63,13],[30,66,25],[31,53,13],[31,63,14],[32,53,15],[32,66,13],[33,53,14],[33,55,16],[34,53,17],[34,58,15],[35,57,18],[35,59,23],[36,54,16],[36,56,18],[37,53,16],[37,54,17],[38,54,18],[38,57,17],[39,62,19],[40,55,14],[40,61,20],[41,55,20],[42,55,21],[42,60,22],[43,55,22],[43,56,16],[44,56,22],[44,59,18],[45,71,24],[46,57,23],[46,63,25],[47,59,26],[47,61,23],[48,62,26],[49,58,25],[49,65,15],[50,57,25],[50,58,17],[51,59,22],[51,60,26],[52,60,21],[64,66,30],[65,66,15],[67,68,3],[68,71,3],[68,72,71],[68,74,70],[68,75,74],[68,76,75],[68,77,69],[68,78,77],[69,76,68],[69,85,76],[70,72,68],[70,74,73],[70,90,72],[70,114,90],[71,110,24],[72,110,71],[73,114,70],[74,114,73],[75,86,74],[76,86,75],[76,104,86],[77,78,19],[77,85,69],[77,102,85],[79,115,94],[79,125,93],[79,128,95],[80,115,96],[80,117,103],[80,123,91],[80,125,94],[81,115,95],[81,120,97],[81,127,111],[81,128,127],[82,115,100],[82,116,99],[82,117,96],[82,118,106],[83,115,97],[83,116,100],[83,119,101],[83,120,112],[84,116,101],[84,118,99],[84,119,98],[84,121,107],[85,104,76],[85,117,104],[85,123,103],[85,124,92],[86,114,74],[86,117,105],[86,122,114],[87,117,106],[87,118,107],[87,121,113],[87,122,105],[88,119,108],[88,121,98],[88,123,109],[88,125,91],[89,119,112],[89,120,111],[89,125,108],[89,128,93],[90,110,72],[90,121,109],[90,122,113],[90,123,92],[90,124,110],[91,123,88],[91,125,80],[92,123,85],[92,124,90],[93,125,89],[93,126,79],[93,128,126],[94,115,80],[94,125,79],[95,115,79],[95,128,81],[96,115,82],[96,117,80],[97,115,81],[97,120,83],[98,119,88],[98,121,84],[99,116,84],[99,118,82],[100,115,83],[100,116,82],[101,116,83],[101,119,84],[102,124,85],[103,117,85],[103,123,80],[104,117,86],[105,117,87],[105,122,86],[106,117,82],[106,118,87],[107,118,84],[107,121,87],[108,119,89],[108,125,88],[109,121,88],[109,123,90],[110,124,24],[111,120,81],[111,127,89],[112,119,83],[112,120,89],[113,121,90],[113,122,87],[114,122,90],[126,128,79],[127,128,89]]
  const vertices = [[-82.37684203,96.44490395,-137.34375961],[-82.37684203,172.9752809,-137.34375961],[102.91453329,96.44490395,-137.34375961],[95.02402732,96.44490395,-0.0010186884],[99.58993577,96.44490395,-28.35883321],[99.9893571,96.44490395,-80.69824329],[100.08770218,116.41529656,-137.34375961],[75.94943382,147.65116567,-137.34375961],[38.74890585,165.84144042,-137.34375961],[-32.00711526,180.41920369,-137.34375961],[-82.37684203,182.38454775,-109.11595908],[-82.37684203,180.84687057,-18.43264029],[-82.37684203,175.79450271,-0.0010186884],[-75.82896813,-207.94481788,-199.88989603],[-100.82896813,-17.61545225,-199.88989603],[74.17103187,-207.94481788,-192.52004556],[52.40389275,-17.61545225,-221.8727569],[94.71335815,-110.78888441,-192.64630377],[125.80136627,-18.42811504,-167.92976538],[-100.82896813,182.38454775,-0.0010186884],[-100.82896813,157.38454775,-174.88989603],[71.71663022,159.00283241,-168.54221792],[94.96213766,70.41111559,-192.64630377],[133.93594847,-24.11675454,-140.93109225],[99.79952747,77.1793386,-0.0010186884],[104.91281001,-152.71935911,-148.30094272],[106.79829678,65.32998974,-123.30094272],[-100.82896813,-17.61545225,-140.93109225],[-100.82896813,77.1793386,-0.0010186884],[-100.82896813,77.1793386,-140.93109225],[-100.82896813,-164.4206614,-140.93109225],[-100.82896813,-117.61545225,-199.88989603],[-0.82896813,-207.94481788,-199.88989603],[-8.9248668,-17.61545225,-216.79399735],[76.58590349,-154.84921968,-197.391534],[134.6650273,-20.8661034,-151.02203127],[97.7522255,-17.61545225,-198.47108966],[63.37650031,-75.94878559,-214.09536446],[116.85110728,-66.37411116,-176.07923189],[-100.82896813,182.38454775,-99.88989603],[-100.82896813,82.38454775,-199.88989603],[-6.74742984,157.38454775,-185.63810098],[76.79540202,115.28411365,-197.391534],[63.37650031,40.71788108,-214.09536446],[117.00823118,27.89255551,-176.07923189],[99.48527967,92.28194317,-0.0010186884],[122.13814441,-91.01805683,-140.93109225],[123.39513559,29.78194317,-140.93109225],[100.42802306,77.1793386,-70.41049414],[99.17103187,-191.01805683,-170.41049414],[105.06051046,-131.97584754,-169.63570049],[106.05562848,76.15748579,-169.63570049],[100.1661499,119.58216022,-151.5520362],[8.83051835,-117.61545225,-209.5493825],[98.03598678,-50.94878559,-198.75485093],[8.83051835,82.38454775,-209.5493825],[98.03598678,15.71788108,-198.75485093],[122.72894623,-79.31675454,-157.48485223],[99.17103187,-166.55052197,-180.23696144],[123.35744182,31.08324546,-157.48485223],[100.009026,113.98281136,-180.23696144],[-100.82896813,29.78194317,-140.93109225],[-100.82896813,77.1793386,-70.41049414],[-100.82896813,-91.01805683,-140.93109225],[-79.99563479,-207.94481788,-166.5565627],[78.33769854,-207.94481788,-160.41502064],[-0.82896813,-207.94481788,-166.5565627],[-82.37684203,96.44490395,-0.0010186884],[-82.37684203,96.44490395,137.34172223],[-82.37684203,172.9752809,137.34172223],[102.91453329,96.44490395,137.34172223],[99.58993577,96.44490395,28.35679583],[99.9893571,96.44490395,80.69620591],[100.08770218,116.41529656,137.34172223],[75.94943382,147.65116567,137.34172223],[38.74890585,165.84144042,137.34172223],[-32.00711526,180.41920369,137.34172223],[-82.37684203,182.38454775,109.1139217],[-82.37684203,180.84687057,18.43060291],[-75.82896813,-207.94481788,199.88785865],[-100.82896813,-17.61545225,199.88785865],[74.17103187,-207.94481788,192.51800818],[52.40389275,-17.61545225,221.87071952],[94.71335815,-110.78888441,192.64426639],[125.80136627,-18.42811504,167.927728],[-100.82896813,157.38454775,174.88785865],[71.71663022,159.00283241,168.54018054],[94.96213766,70.41111559,192.64426639],[133.93594847,-24.11675454,140.92905487],[104.91281001,-152.71935911,148.29890535],[106.79829678,65.32998974,123.29890535],[-100.82896813,-17.61545225,140.92905487],[-100.82896813,77.1793386,140.92905487],[-100.82896813,-164.4206614,140.92905487],[-100.82896813,-117.61545225,199.88785865],[-0.82896813,-207.94481788,199.88785865],[-8.9248668,-17.61545225,216.79195997],[76.58590349,-154.84921968,197.38949662],[134.6650273,-20.8661034,151.01999389],[97.7522255,-17.61545225,198.46905228],[63.37650031,-75.94878559,214.09332708],[116.85110728,-66.37411116,176.07719451],[-100.82896813,182.38454775,99.88785865],[-100.82896813,82.38454775,199.88785865],[-6.74742984,157.38454775,185.6360636],[76.79540202,115.28411365,197.38949662],[63.37650031,40.71788108,214.09332708],[117.00823118,27.89255551,176.07719451],[122.13814441,-91.01805683,140.92905487],[123.39513559,29.78194317,140.92905487],[100.42802306,77.1793386,70.40845676],[99.17103187,-191.01805683,170.40845676],[105.06051046,-131.97584754,169.63366311],[106.05562848,76.15748579,169.63366311],[100.1661499,119.58216022,151.54999882],[8.83051835,-117.61545225,209.54734512],[98.03598678,-50.94878559,198.75281355],[8.83051835,82.38454775,209.54734512],[98.03598678,15.71788108,198.75281355],[122.72894623,-79.31675454,157.48281485],[99.17103187,-166.55052197,180.23492406],[123.35744182,31.08324546,157.48281485],[100.009026,113.98281136,180.23492406],[-100.82896813,29.78194317,140.92905487],[-100.82896813,77.1793386,70.40845676],[-100.82896813,-91.01805683,140.92905487],[-79.99563479,-207.94481788,166.55452532],[78.33769854,-207.94481788,160.41298326],[-0.82896813,-207.94481788,166.55452532]]
  const groups = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
return {faces:faces, vertices:vertices, groups:groups}
}

const main = (params) => {
  const sc = 1, ep = params.ep *2

	//const vv = require('./' + params.v + '.obj')
	const v = volume()
	const vv = polyhedron({points:v.vertices, faces:v.faces})
  const vol = center({}, rotateX(degToRad(90), vv))
  
  let r = [], rH = [], rV = []
  let bV = measureBoundingBox(vol)

	// Recup parametres
  const pv = Object.values(params)
  const lH = pv.slice(0,10).filter(Number).map(x => (x-50)/100)
  const lV = pv.slice(10,20).filter(Number).map(x => (x-50)/100)
  
	// 1°) Traverses en X (H)
  fH = bV[1][0] - bV[0][0]
  mH = (bV[1][0] + bV[0][0]) / 2
  var trH = cuboid( {
		size: [ ep, 1+bV[1][1]- bV[0][1], 1+bV[1][2] - bV[0][2] ]} )
	for (let i = 0; i < lH.length; i++){
		var t = intersect(vol, translateX(fH * lH[i], trH))
		if (t.polygons.length > 0)
			rH.push(t)
	}

	// 2°) Traverses en Y (V)
	fV = bV[1][1] - bV[0][1]
	mV = (bV[1][1] + bV[0][1]) / 2
	var trV = cuboid( {
		size: [ 1+ bV[1][0] - bV[0][0], ep, 1+ bV[1][2] - bV[0][2] ]} )	
	for (let i = 0; i < lV.length; i++){
		var t = intersect(vol, translateY(fV * lV[i], trV))
		if (t.polygons.length > 0)
			rV.push(t)
	}
	
	// 3°) Entrecroisement
	var ur = union(intersect(union(rH), union(rV)));
	var tmp = scission3d(ur)  
	var eS = [], eH = [], eV = [];
	for(let i=0; i< tmp.length; i++){
		let p = tmp[i];
		let b = measureBoundingBox(p), 
				d = vec3.subtract(b[1], b[0]);
		let c1 = translate([b[0][0], b[0][1] + ep/2, b[0][2]], 
					cuboid({size: [d[0], d[1]*2, d[2]]}));
		let c2 = translate([b[0][0] + ep/2, b[0][1], b[1][2]], 
					cuboid({size: [d[0]*2, d[1], d[2]]}));
		
		eH.push(intersect(tmp[i], c2));
		eV.push(intersect(tmp[i], c1));
	}
	
	rH = rH.map(x=> subtract(x, eV));
	rV = rV.map(x=> subtract(x, eH));

	// 3d
	//r.push(colorize([0,1,0], translateX(-70, vol)));
	//r.push(colorize([1,0,0], translateX(32-70, rH)));
	//r.push(colorize([0,0,1], translateX(-32-70, rV)));
	
	// 2d
	
	var dk = Math.max(fV, fH) +1
	for(let ih = 0; ih < rH.length; ih++){
		let b = measureBoundingBox(rH[ih]);
		r.push(translateX(dk *ih, union(vol2surf(rH[ih], 'x', b[0][0]))))
		//r.push(translateX(dk *ih, vol2surf(rH[ih], 'x', b[0][0])))
	}
	for(let iv = 0; iv < rV.length; iv++){
		let b = measureBoundingBox(rV[iv]);
		r.push(translate([dk *iv, -dk], union(vol2surf(rV[iv], 'y', b[0][1]))))
		//r.push(translate([dk *iv, -dk], vol2surf(rV[iv], 'y', b[0][1])))
	}
		
	return r;
}
function rndColors(){return [Math.random(), Math.random(), Math.random()];}
function sortNb	(E){ // returns E numerically sorted and deduplicated
	return E.sort(function(a, b) {return a-b}).filter(
	    function(item, pos, ary) {return !pos || item != ary[pos - 1]});
}
function scission3d	(geom){
  var i, Pl, j, i1, j1, ok, ti, tj, z, 
  zz = [], P, RScission, til, tjl, tii1, zzl, zzdl;
// construit table de correspondance entre Polygones (P)
// build polygons lookup table
  //P = geom.toPolygons();
  P = geom.polygons;
  
  RScission = [];
  Pl = P.length;
  for (i = 0; i < Pl; i++){
	ti = P[i].vertices;
	z = [];
	for (j = 0; j < Pl; j++){
      tj = P[j].vertices;
	  ok = false;
	  for (i1 = 0; i1 < ti.length; i1++){
	    tii1 = ti[i1];
		for(j1 = 0; j1 < tj.length; j1++)
		  if (!ok)ok = vec3.distance(tii1, tj[j1]) < 0.01;
	  }
	  if (ok)z.push(parseInt(j));
	}
	z = sortNb(z);
	zz.push({e:0, d:z});
  }

// regroupe les correspondances des polygones se touchant
// boucle ne s'arrêtant que quand deux passages retournent le même nb de polygones
// merge lookup data from linked polygons as long as possible
  ok = false;
  nElOk = 0;
  do {
    lnElOk = nElOk;
	nElOk = 0;
	for (i = 0; i < zz.length; i++){
	  if (zz[i].e >= 0) {
	    nElOk++;
		for (j = 0; j < zz[i].d.length; j++){
		  a = zz[i].d[j];
		  if (zz[a].e >= 0)
		    if (i != a) {
			  zz[i].d = sortNb(zz[i].d.concat(zz[a].d));
			  zz[a].e = -1;
			}
		}
	  }
	}
	ok = lnElOk == nElOk;
  }while (!ok);

// construit le tableau des CSG à retourner
// build array of CSG to return
  for (i = 0, zzl = zz.length; i < zzl; i++) {
    if (zz[i].e >= 0) {
			z = [];
			for (j = 0, zzdl = zz[i].d.length; j < zzdl; j++){
				z.push(P[zz[i].d[j]]);
			}
			if(z.length > 0) {
			RScission.push(geom3.create(z));
			}
	  }
  }

  return RScission;
}
function vol2surf(vol, axe, orig = 0){ // axe = 'x' | 'y' | 'z'
// retourne la surface formee par le volume avec l'axe z (à 0)
let S = [];
let X, Y, Z;

for(let n = 0; n < vol.polygons.length; n++){
  let pts = [];
  let P = vol.polygons[n];
  let ok = true;
  switch(axe){
		case 'x':
			X = 1; Y = 2; Z = 0;
			break;
		case 'y':
			X = 0; Y = 2; Z = 1;
			break;
		case 'z':
			X = 0; Y = 1; Z = 2;
			break;
	}
  for(let i=0; (i < P.vertices.length) && ok; i++){
    let pt = P.vertices[i];
    if(Math.abs(pt[Z] - orig)< 0.05){
      pts.push([pt[X], pt[Y]]);
    } else {
      ok = false;
    }
  }
  if (ok){
    if(axe == 'x'){
			S.push(polygon({points:pts.reverse()}));
		} else {
			S.push(polygon({points:pts}));
		}
  }
}

return S;
}

module.exports = { main, getParameterDefinitions }
